# telegram_rpg_bot.py
# -*- coding: utf-8 -*-
"""
–ü–æ–∫—Ä–æ–∫–æ–≤–∞ RPG-–≥—Ä–∞ –¥–ª—è Telegram –Ω–∞ Python –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º python-telegram-bot v20+.
–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:
- /start, /help, /newgame, /stats, /inventory, /explore (—Ä–∞–Ω–¥–æ–º –ø–æ–¥—ñ—ó/–±–∏—Ç–≤–∏)
- –ü–æ—à–∞–≥–æ–≤–∏–π –±—ñ–π –∑ –∫–Ω–æ–ø–∫–∞–º–∏: –ê—Ç–∞–∫–∞, –ó–∞—Ö–∏—Å—Ç, –í–º—ñ–Ω–Ω—è, –ó—ñ–ª–ª—è, –í—Ç–µ–∫—Ç–∏
- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —á–µ—Ä–µ–∑ PicklePersistence (—Ñ–∞–π–ª rpgbot.pickle)
- –ü—Ä–æ—Å—Ç–∏–π –±–∞–ª–∞–Ω—Å —ñ –ø—Ä–∏–∫–ª–∞–¥ —Ä–æ–∑—à–∏—Ä—é–≤–∞–Ω–æ—ó –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏

–ó–∞–ø—É—Å–∫:
1) pip install python-telegram-bot==20.*
2) BOT_TOKEN=...  (setx –Ω–∞ Windows –∞–±–æ export –Ω–∞ Linux/macOS)
3) python telegram_rpg_bot.py

–õ–æ–∫–∞–ª—å–Ω–æ –ø—Ä–∞—Ü—é—î Long Polling.
–ù–∞ Render ‚Äî Webhook, —è–∫—â–æ –∑–∞–¥–∞–Ω–æ WEBHOOK_URL (root URL —Å–µ—Ä–≤—ñ—Å—É).
"""
from __future__ import annotations

import asyncio
import logging
import os
import random
from dataclasses import dataclass, asdict
from typing import Dict, Any, Tuple  # Optional –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω

# –ù–∞–∑–≤–∞ –±–æ—Ç–∞ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö (–º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∑–º—ñ–Ω–Ω–æ—é BOT_DISPLAY_NAME)
BOT_DISPLAY_NAME = os.getenv("BOT_DISPLAY_NAME", "RPG0")

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    PicklePersistence,
    filters,
)

# ----------------------------- –õ–û–ì–£–í–ê–ù–ù–Ø -----------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)
LOGGER = logging.getLogger("RPG")

# ----------------------------- –ö–û–ù–°–¢–ê–ù–¢–ò –°–¢–ê–ù–Ü–í -----------------------------
CHOOSING_ACTION, ENEMY_TURN, LOOTING = range(3)

# ----------------------------- –î–ê–¢–ê–ö–õ–ê–°–ò -----------------------------
@dataclass
class Player:
    name: str = "–ú–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫"
    level: int = 1
    exp: int = 0
    hp: int = 30
    max_hp: int = 30
    atk: int = 6
    defense: int = 2
    potions: int = 2
    gold: int = 0

    def is_alive(self) -> bool:
        return self.hp > 0

    def heal(self) -> int:
        if self.potions <= 0:
            return 0
        self.potions -= 1
        heal_amount = min(12, self.max_hp - self.hp)
        self.hp += heal_amount
        return heal_amount

    def gain_exp(self, amount: int) -> Tuple[int, bool]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î (–Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å, —á–∏ –≤—ñ–¥–±—É–≤—Å—è –∞–ø)."""
        self.exp += amount
        leveled = False
        while self.exp >= self._exp_to_next():
            self.exp -= self._exp_to_next()
            self.level += 1
            leveled = True
            # –ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
            self.max_hp += 5
            self.atk += 2
            self.defense += 1
            self.hp = self.max_hp
        return self.level, leveled

    def _exp_to_next(self) -> int:
        return 20 + (self.level - 1) * 10


@dataclass
class Enemy:
    name: str
    hp: int
    max_hp: int
    atk: int
    defense: int
    exp_reward: int
    gold_reward: int

    def is_alive(self) -> bool:
        return self.hp > 0

# ----------------------------- –£–¢–ò–õ–Ü–¢–ò -----------------------------
def ensure_player(user_data: Dict[str, Any]) -> Player:
    if "player" not in user_data:
        user_data["player"] = asdict(Player())
    # –¢—Ä–∏–º–∞—î–º–æ —É user_data —Å–ª–æ–≤–Ω–∏–∫ (—Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å —ñ–∑ PicklePersistence)
    p = dict_to_player(user_data["player"])
    user_data["player"] = asdict(p)
    return p

def dict_to_player(d: Dict[str, Any]) -> Player:
    return Player(**d)

def dict_to_enemy(d: Dict[str, Any]) -> Enemy:
    return Enemy(**d)

def roll_damage(atk: int, defense: int) -> int:
    base = max(0, atk - defense)
    variance = random.randint(-2, 2)
    dmg = max(1, base + variance)
    return dmg

def battle_keyboard(in_battle: bool = True) -> InlineKeyboardMarkup:
    if in_battle:
        buttons = [
            [InlineKeyboardButton("‚öîÔ∏è –ê—Ç–∞–∫–∞", callback_data="attack"),
             InlineKeyboardButton("üõ°Ô∏è –ó–∞—Ö–∏—Å—Ç", callback_data="defend")],
            [InlineKeyboardButton("‚ú® –í–º—ñ–Ω–Ω—è", callback_data="skill"),
             InlineKeyboardButton("üß™ –ó—ñ–ª–ª—è", callback_data="potion")],
            [InlineKeyboardButton("üèÉ –í—Ç–µ–∫—Ç–∏", callback_data="run")],
        ]
    else:
        buttons = [[InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data="continue")]]
    return InlineKeyboardMarkup(buttons)

def format_stats(p: Player) -> str:
    return (
        f"<b>{p.name}</b> ‚Äî —Ä—ñ–≤–µ–Ω—å {p.level}\n"
        f"HP: {p.hp}/{p.max_hp} | –ê—Ç–∞–∫–∞: {p.atk} | –ó–∞—Ö–∏—Å—Ç: {p.defense}\n"
        f"EXP: {p.exp}/{20 + (p.level - 1) * 10} | –ó—ñ–ª–ª—è: {p.potions} | –ó–æ–ª–æ—Ç–æ: {p.gold}"
    )

# ----------------------------- –ö–û–ú–ê–ù–î–ò -----------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    ensure_player(context.user_data)
    welcome = (
        f"üëã –í–∞—Å –≤—ñ—Ç–∞—î <b>{BOT_DISPLAY_NAME}</b> ‚Äî –ø–æ–∫—Ä–æ–∫–æ–≤–∞ RPG —É —Å–µ—Ç—Ç–∏–Ω–≥—É —Å–µ—Ä–µ–¥–Ω—å–æ–≤—ñ—á–Ω–æ–≥–æ —Ñ–µ–Ω—Ç–µ–∑—ñ!\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/newgame ‚Äî –ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É –≥—Ä—É (—Å–∫–∏–¥–∞—î –ø—Ä–æ–≥—Ä–µ—Å)\n"
        "/stats ‚Äî —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ—è\n"
        "/inventory ‚Äî —ñ–Ω–≤–µ–Ω—Ç–∞—Ä\n"
        "/explore ‚Äî –≤–∏—Ä—É—à–∏—Ç–∏ —É –ø—Ä–∏–≥–æ–¥—É (—à–∞–Ω—Å–∏ –Ω–∞ –±—ñ–π/–ª—É—Ç/–ø–æ–¥—ñ—é)\n"
        "/help ‚Äî –¥–æ–≤—ñ–¥–∫–∞"
    )
    await update.message.reply_html(welcome)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü–∏—Ç–∞–Ω–Ω—è? –ù–∞–ø–∏—à–∏ /start –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.")

async def newgame(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data["player"] = asdict(Player())
    await update.message.reply_html("üÜï <b>–ù–æ–≤–∞ –ø—Ä–∏–≥–æ–¥–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∞!</b> –í–∞—à –≥–µ—Ä–æ–π —Å—Ç–≤–æ—Ä–µ–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /explore.")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    p = ensure_player(context.user_data)
    await update.message.reply_html(format_stats(p))

async def inventory(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    p = ensure_player(context.user_data)
    await update.message.reply_html(f"üéí –Ü–Ω–≤–µ–Ω—Ç–∞—Ä:\nüß™ –ó—ñ–ª–ª—è: {p.potions}\nüí∞ –ó–æ–ª–æ—Ç–æ: {p.gold}")

# ----------------------------- –î–û–°–õ–Ü–î–ñ–ï–ù–ù–Ø/–ü–†–ò–ì–û–î–ê -----------------------------
async def explore(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    p = ensure_player(context.user_data)

    roll = random.random()
    if roll < 0.6:
        # –ë–∏—Ç–≤–∞
        enemy = spawn_enemy_for(p)
        context.user_data["enemy"] = enemy.__dict__
        context.user_data["defending"] = False
        await update.message.reply_html(
            f"üî™ –í–∏ –Ω–∞—Ç—Ä–∞–ø–∏–ª–∏ –Ω–∞ <b>{enemy.name}</b>!\n"
            f"HP –≤–æ—Ä–æ–≥–∞: {enemy.hp}/{enemy.max_hp}",
            reply_markup=battle_keyboard(True),
        )
        return CHOOSING_ACTION
    elif roll < 0.85:
        # –õ—É—Ç
        gold = random.randint(5, 20)
        p.gold += gold
        context.user_data["player"] = asdict(p)
        await update.message.reply_html(f"üß∞ –í–∏ –∑–Ω–∞–π—à–ª–∏ —Å–∫—Ä–∏–Ω—é –∑ {gold} –∑–æ–ª–æ—Ç–∏–º–∏ –º–æ–Ω–µ—Ç–∞–º–∏! –¢–µ–ø–µ—Ä —É –≤–∞—Å {p.gold}.")
        return ConversationHandler.END
    else:
        # –ü–æ–¥—ñ—è-–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
        heal = min(p.max_hp - p.hp, random.randint(5, 12))
        p.hp += heal
        context.user_data["player"] = asdict(p)
        await update.message.reply_html(f"‚õ∫ –í–∏ –≤—ñ–¥–ø–æ—á–∏–ª–∏ –±—ñ–ª—è –≤–æ–≥–Ω–∏—â–∞ —Ç–∞ –≤—ñ–¥–Ω–æ–≤–∏–ª–∏ {heal} HP. –¢–µ–ø–µ—Ä {p.hp}/{p.max_hp}.")
        return ConversationHandler.END

# ----------------------------- –ë–ò–¢–í–ê: –•–û–î –ì–†–ê–í–¶–Ø -----------------------------
async def on_battle_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    p = dict_to_player(context.user_data.get("player"))
    e = dict_to_enemy(context.user_data.get("enemy"))

    action = query.data
    context.user_data["defending"] = False
    text = ""

    if action == "attack":
        dmg = roll_damage(p.atk, e.defense)
        e.hp -= dmg
        text = f"‚öîÔ∏è –í–∏ –≤–¥–∞—Ä–∏–ª–∏ {e.name} –Ω–∞ {dmg} —à–∫–æ–¥–∏."
    elif action == "defend":
        context.user_data["defending"] = True
        text = "üõ°Ô∏è –í–∏ —É —Å—Ç—ñ–π—Ü—ñ –∑–∞—Ö–∏—Å—Ç—É ‚Äî —à–∫–æ–¥–∞ —Ü—å–æ–≥–æ —Ö–æ–¥—É –ø–æ –≤–∞–º –∑–º–µ–Ω—à–µ–Ω–∞ –≤–¥–≤—ñ—á—ñ."
    elif action == "skill":
        # –ü—Ä–æ—Å—Ç–µ –≤–º—ñ–Ω–Ω—è: –ø–æ—Ç—É–∂–Ω–∏–π —É–¥–∞—Ä (–¥–µ–º–æ)
        dmg = roll_damage(p.atk + 3, e.defense)
        e.hp -= dmg
        text = f"‚ú® –í–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–ª–∏ –≤–º—ñ–Ω–Ω—è: –ü–æ—Ç—É–∂–Ω–∏–π —É–¥–∞—Ä! {e.name} –æ—Ç—Ä–∏–º—É—î {dmg} —à–∫–æ–¥–∏."
    elif action == "potion":
        healed = p.heal()
        context.user_data["player"] = asdict(p)
        if healed == 0:
            text = "üß™ –ó—ñ–ª–ª—è –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ HP –ø–æ–≤–Ω–µ. –•—ñ–¥ –≤—Ç—Ä–∞—á–µ–Ω–æ."
        else:
            text = f"üß™ –í–∏ –≤–∏–ø–∏–ª–∏ –∑—ñ–ª–ª—è —Ç–∞ –≤—ñ–¥–Ω–æ–≤–∏–ª–∏ {healed} HP. ({p.hp}/{p.max_hp})"
    elif action == "run":
        if random.random() < 0.5:
            await query.edit_message_text("üèÉ –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—Ç–µ–∫–ª–∏ –≤—ñ–¥ –±–æ—é.")
            return ConversationHandler.END
        else:
            text = "‚ùå –í—Ç–µ–∫—Ç–∏ –Ω–µ –≤–¥–∞–ª–æ—Å—è!"

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–º–µ—Ä—Ç—ñ –≤–æ—Ä–æ–≥–∞
    if e.hp <= 0:
        reward_exp = e.exp_reward
        reward_gold = e.gold_reward
        level, leveled = p.gain_exp(reward_exp)
        p.gold += reward_gold
        context.user_data["player"] = asdict(p)
        context.user_data.pop("enemy", None)
        summary = (
            f"üíÄ {e.name} –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!\n"
            f"+{reward_exp} EXP, +{reward_gold} –∑–æ–ª–æ—Ç–∞.\n"
        )
        if leveled:
            summary += f"‚¨ÜÔ∏è –†—ñ–≤–µ–Ω—å –ø—ñ–¥–≤–∏—â–µ–Ω–æ –¥–æ {level}! HP/–ê—Ç–∞–∫–∞/–ó–∞—Ö–∏—Å—Ç –∑—Ä–æ—Å–ª–∏, HP –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {p.max_hp}."
        await query.edit_message_text(
            text + "\n\n" + summary,
            reply_markup=battle_keyboard(in_battle=False),
        )
        return LOOTING

    # –û–Ω–æ–≤–ª—é—î–º–æ –≤–æ—Ä–æ–≥–∞ –π –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Ö–æ–¥—É –≤–æ—Ä–æ–≥–∞
    context.user_data["enemy"] = e.__dict__

    status = (
        f"<b>{p.name}</b> HP: {p.hp}/{p.max_hp}\n"
        f"<b>{e.name}</b> HP: {e.hp}/{e.max_hp}"
    )
    await query.edit_message_text(
        text + "\n\n" + status + "\n\n–•—ñ–¥ –≤–æ—Ä–æ–≥–∞...",
        parse_mode=ParseMode.HTML,
    )
    return await enemy_turn(update, context)

# ----------------------------- –ë–ò–¢–í–ê: –•–Ü–î –í–û–†–û–ì–ê -----------------------------
async def enemy_turn(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    p = dict_to_player(context.user_data.get("player"))
    e = dict_to_enemy(context.user_data.get("enemy"))

    if not e.is_alive():
        return LOOTING

    # –Ü–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ—Å–æ–±–ª–∏–≤–æ—ó –∞—Ç–∞–∫–∏ 20%
    special = random.random() < 0.2
    atk = e.atk + (3 if special else 0)
    dmg = roll_damage(atk, p.defense)

    if context.user_data.get("defending"):
        dmg = max(1, dmg // 2)

    p.hp -= dmg
    context.user_data["player"] = asdict(p)

    action_text = (
        f"üßü‚Äç‚ôÇÔ∏è {e.name} {'–∑–∞–≤–¥–∞—î –∫—Ä–∏—Ç–∏—á–Ω–æ—ó –∞—Ç–∞–∫–∏' if special else '–±'—î'} –Ω–∞ {dmg} —à–∫–æ–¥–∏!\n"
        f"<b>{p.name}</b> HP: {p.hp}/{p.max_hp}\n"
        f"<b>{e.name}</b> HP: {e.hp}/{e.max_hp}"
    )

    if p.hp <= 0:
        context.user_data.pop("enemy", None)
        await update.effective_message.reply_html(
            action_text + "\n\n‚ò†Ô∏è –í–∏ –∑–∞–≥–∏–Ω—É–ª–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /newgame, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É."
        )
        return ConversationHandler.END

    await update.effective_message.reply_html(
        action_text + "\n\n–í–∞—à —Ö—ñ–¥: –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é.",
        reply_markup=battle_keyboard(True),
    )
    return CHOOSING_ACTION

# ----------------------------- –ü–û–°–¢-–ë–ò–¢–í–ê -----------------------------
async def after_loot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text("‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–∏–≥–æ–¥—É! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /explore.")
    else:
        await update.message.reply_text("‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–∏–≥–æ–¥—É! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /explore.")
    return ConversationHandler.END

# ----------------------------- –ì–ï–ù–ï–†–ê–¶–Ü–Ø –í–û–†–û–ì–Ü–í -----------------------------
def spawn_enemy_for(p: Player) -> Enemy:
    # –ü—Ä–æ—Å—Ç—ñ —à–∞–±–ª–æ–Ω–∏ –≤–æ—Ä–æ–≥—ñ–≤, –º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω—ñ –∑–∞ —Ä—ñ–≤–Ω–µ–º
    templates = [
        ("–ì–æ–±–ª—ñ–Ω-–Ω–∞–±—ñ–≥–Ω–∏–∫", 18, 5, 1, 12, 10),
        ("–í–æ–≤–∫ –ª—ñ—Å–æ–≤–∏–π", 20, 6, 2, 14, 12),
        ("–ö—ñ—Å—Ç—è–Ω–∏–π –≤–∞—Ä—Ç–æ–≤–∏–π", 22, 7, 2, 16, 14),
        ("–†–æ–∑–±—ñ–π–Ω–∏–∫ —Ç—Ä–∞–∫—Ç—É", 24, 8, 3, 18, 16),
        ("–û—Ä–∫-–±–µ—Ä—Å–µ—Ä–∫", 28, 9, 3, 22, 20),
        ("–†–∏—Ü–∞—Ä-–≤—ñ–¥—Å—Ç—É–ø–Ω–∏–∫", 32, 10, 4, 26, 24),
    ]
    name, base_hp, base_atk, base_def, exp, gold = random.choice(templates)
    # –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –∑ —Ä—ñ–≤–Ω–µ–º
    hp = base_hp + (p.level - 1) * 4
    atk = base_atk + (p.level - 1)
    defense = base_def + (p.level // 3)
    exp_reward = exp + (p.level - 1) * 3
    gold_reward = gold + random.randint(0, p.level * 2)
    return Enemy(
        name=name, hp=hp, max_hp=hp, atk=atk, defense=defense,
        exp_reward=exp_reward, gold_reward=gold_reward
    )

# ----------------------------- MAIN -----------------------------
async def on_unknown(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ù–µ—Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ /help")

def build_app() -> Application:
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è.")

    persistence = PicklePersistence(filepath="rpgbot.pickle")
    app = ApplicationBuilder().token(token).persistence(persistence).build()

    # –°—Ç–∞—Ç–∏—á–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("newgame", newgame))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("inventory", inventory))

    # –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è/–±–∏—Ç–≤–∞ —è–∫ —Ä–æ–∑–º–æ–≤–∞
    battle_conv = ConversationHandler(
        entry_points=[CommandHandler("explore", explore)],
        states={
            CHOOSING_ACTION: [CallbackQueryHandler(on_battle_action)],
            ENEMY_TURN: [],  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ —á–µ—Ä–µ–∑ enemy_turn()
            LOOTING: [CallbackQueryHandler(after_loot)],
        },
        fallbacks=[CommandHandler("stats", stats)],
        name="battle_conv",
        persistent=True,
    )
    app.add_handler(battle_conv)

    # Unknown
    app.add_handler(MessageHandler(filters.COMMAND, on_unknown))

    return app

async def main() -> None:
    app = build_app()

    webhook_url = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: https://your-app.onrender.com
    port = int(os.getenv("PORT", "10000"))
    url_path = os.getenv("WEBHOOK_PATH", os.getenv("BOT_TOKEN"))

    if webhook_url:
        LOGGER.info("RPG Bot: —Ä–µ–∂–∏–º Webhook (Render)...")
        await app.initialize()
        await app.start()
        try:
            await app.run_webhook(
                listen="0.0.0.0",
                port=port,
                url_path=url_path,
                webhook_url=f"{webhook_url.rstrip('/')}/{url_path}",
                drop_pending_updates=True,
            )
        finally:
            await app.stop()
            await app.shutdown()
    else:
        LOGGER.info("RPG Bot: —Ä–µ–∂–∏–º Long Polling (–ª–æ–∫–∞–ª—å–Ω–æ)...")
        await app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ó—É–ø–∏–Ω–µ–Ω–æ.")
