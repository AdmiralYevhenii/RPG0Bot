# -*- coding: utf-8 -*-
import random

# –ë–∞–∑–æ–≤—ñ —Ü—ñ–Ω–∏ –∑–∞ —Ä—ñ–¥–∫—ñ—Å—Ç—é
RARITY_PRICE = {
    "common": 12,
    "uncommon": 25,
    "rare": 50,
    "epic": 90,
    "legendary": 180,
}
SELL_RATE = 0.6  # –ø—Ä–æ–¥–∞—î–º–æ –∑–∞ 60%

def compute_price(rarity: str) -> int:
    """–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ —Ü—ñ–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∑–∞ —Ä—ñ–¥–∫—ñ—Å—Ç—é –∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é —Ä–æ–∑–±—ñ–∂–Ω—ñ—Å—Ç—é."""
    rarity = rarity if rarity in RARITY_PRICE else "common"
    base = RARITY_PRICE[rarity]
    return base + random.randint(0, max(1, base // 3))

def price_of_item(it: dict) -> int:
    """–¶—ñ–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞: —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–∞ –≤ it['price'] ‚Äî –±–µ—Ä–µ–º–æ —ó—ó, —ñ–Ω–∞–∫—à–µ —Ä–∞—Ö—É—î–º–æ –≤—ñ–¥ —Ä—ñ–¥–∫—ñ—Å–Ω–æ—Å—Ç—ñ."""
    if isinstance(it.get("price"), int):
        return it["price"]
    return compute_price(it.get("rarity", "common"))

def sell_value(it: dict) -> int:
    """–°–∫—ñ–ª—å–∫–∏ –æ—Ç—Ä–∏–º–∞—î–º–æ –∑–∞ –ø—Ä–æ–¥–∞–∂ –ø—Ä–µ–¥–º–µ—Ç–∞."""
    return int(price_of_item(it) * SELL_RATE)

# –Ü–º–µ–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –∑–∞ –ª–æ–∫–∞—Ü—ñ—è–º–∏ (–¥–ª—è flavor)
NAMES_BY_LOC = {
    "–ú—ñ—Å—Ç–æ": ["–ö–∏—à–µ–Ω—å–∫–æ–≤–∏–π –∞–º—É–ª–µ—Ç", "–ì—ñ–ª—å–¥—ñ–π—Å—å–∫–∏–π –∂–µ—Ç–æ–Ω", "–°—Ä—ñ–±–Ω–∏–π –ø–µ—Ä—Å—Ç–µ–Ω—å"],
    "–¢—Ä–∞–∫—Ç": ["–ú–æ—Ö–æ–≤–∏—Ç–∏–π —Ç–∞–ª—ñ—Å–º–∞–Ω", "–ö–ª–∏–Ω–æ–∫ –º–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫–∞", "–®–∫—ñ—Ä—è–Ω–∏–π —Ç—É–±—É—Å"],
    "–†—É—ó–Ω–∏": ["–û—Å–∫–æ–ª–æ–∫ —Ä—É–Ω–∏", "–Ü—Ä–∂–∞–≤–∏–π –≥–µ—Ä–±", "–ö—ñ—Å—Ç—è–Ω–∏–π –æ–±–µ—Ä—ñ–≥"],
    "–ì—ñ–ª—å–¥—ñ—è –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç—ñ–≤": ["–ó–Ω–∞—á–æ–∫ —É—á–Ω—è", "–ü–∞–º‚Äô—è—Ç–Ω–∞ –±–ª—è—à–∫–∞", "–ü—Ä–æ–±–Ω–∏–π –∂–µ—Ç–æ–Ω"],
}

def _roll_item_type() -> str:
    return random.choices(["weapon", "armor", "accessory"], weights=[4, 4, 2], k=1)[0]

def _item_bonus_for(rarity: str, itype: str) -> dict:
    scale = {"common": 1, "uncommon": 2, "rare": 3, "epic": 4, "legendary": 6}.get(rarity, 1)
    if itype == "weapon":
        return {"atk": scale, "def": 0}
    if itype == "armor":
        return {"atk": 0, "def": scale}
    # accessory ‚Äî –∑–º—ñ—à–∞–Ω–∏–π –±–æ–Ω—É—Å
    return {"atk": max(1, scale - 1), "def": max(0, scale - 2)}

def generate_loot(location: str) -> dict:
    """–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –∑ —Ä—ñ–¥–∫—ñ—Å–Ω—ñ—Å—Ç—é, —Ç–∏–ø–æ–º, –±–æ–Ω—É—Å–∞–º–∏ —Ç–∞ (–æ–ø—Ü—ñ–π–Ω–æ) –∑–æ–ª–æ—Ç–æ–º."""
    r = random.random()
    if r < 0.60:
        rarity, title, emoji, gold = "common", "‚ö™ –ó–≤–∏—á–∞–π–Ω–∏–π", "‚ö™", random.randint(0, 4)
    elif r < 0.85:
        rarity, title, emoji, gold = "uncommon", "üü¢ –ù–µ–∑–≤–∏—á–∞–π–Ω–∏–π", "üü¢", random.randint(2, 8)
    elif r < 0.97:
        rarity, title, emoji, gold = "rare", "üîµ –†—ñ–¥–∫—ñ—Å–Ω–∏–π", "üîµ", random.randint(5, 12)
    else:
        rarity, title, emoji, gold = "epic", "üü£ –ï–ø—ñ—á–Ω–∏–π", "üü£", random.randint(10, 20)

    names = NAMES_BY_LOC.get(location, NAMES_BY_LOC["–¢—Ä–∞–∫—Ç"])
    name = random.choice(names)

    itype = _roll_item_type()
    bonus = _item_bonus_for(rarity, itype)
    price = compute_price(rarity)

    return {
        "name": name,
        "rarity": rarity,
        "title": title,
        "emoji": emoji,
        "gold": gold,
        "type": itype,
        "atk": bonus["atk"],
        "def": bonus["def"],
        "price": price,
        "equipped": False,
        # durability –º–æ–∂—É—Ç—å –¥–æ–¥–∞–≤–∞—Ç–∏ —ñ–Ω—à—ñ –º–æ–¥—É–ª—ñ –ø—ñ–¥ —á–∞—Å –µ–∫—ñ–ø—É–≤–∞–Ω–Ω—è/–±–∏—Ç–≤–∏
    }
