# -*- coding: utf-8 -*-
from __future__ import annotations

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from ..config import LOC_GUILD, SKILL_SLOT_MAX, GUILD_RESPEC_COST
from ..models import ensure_player_ud
from ..utils.skills import CLASS_SKILLS, skill_short_desc


def _kb(options, prefix: str | None = None) -> InlineKeyboardMarkup:
    """
    –ë—É–¥—É—î –æ–¥–Ω–æ–∫–æ–ª–æ–Ω–∫–æ–≤—É Inline-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É.
    options: iterable[(text, data)]
    –Ø–∫—â–æ prefix –ø–µ—Ä–µ–¥–∞–Ω–æ ‚Äî –¥–æ–¥–∞—î –π–æ–≥–æ —è–∫ "prefix:data", —ñ–Ω–∞–∫—à–µ –±–µ—Ä–µ data —è–∫ —î.
    """
    def cb(data: str) -> str:
        return f"{prefix}:{data}" if prefix else data

    return InlineKeyboardMarkup([
        [InlineKeyboardButton(txt, callback_data=cb(data))]
        for txt, data in options
    ])


def _render_loadout(p) -> str:
    load = list(getattr(p, "skills_loadout", []) or [])
    if not load:
        return "‚Äî –Ω–µ –≤–∏–±—Ä–∞–Ω–æ ‚Äî"
    out = []
    for i, name in enumerate(load[:SKILL_SLOT_MAX], start=1):
        out.append(f"{i}. <b>{name}</b> ‚Äî {skill_short_desc(name)}")
    return "\n".join(out)


def _render_known(p) -> str:
    known = list(getattr(p, "skills_known", []) or [])
    if not known:
        return "‚Äî –Ω–µ–º–∞—î –≤–∏–≤—á–µ–Ω–∏—Ö —É–º—ñ–Ω—å ‚Äî"
    return "\n".join([f"‚Ä¢ <b>{s}</b> ‚Äî {skill_short_desc(s)}" for s in known])


def _in_guild(context) -> bool:
    return context.user_data.get("location") == LOC_GUILD


async def guild(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ì—ñ–ª—å–¥—ñ—ó: –≤–∏–±—ñ—Ä —Ç–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —É–º—ñ–Ω–Ω—è–º–∏."""
    p = ensure_player_ud(context.user_data)

    if not _in_guild(context):
        await update.message.reply_html(
            f"üèõÔ∏è –í–∏ –Ω–µ –≤ <b>{LOC_GUILD}</b>. –ó–∞–π–¥—ñ—Ç—å —Ç—É–¥–∏ —á–µ—Ä–µ–∑ /travel.",
        )
        return

    known = getattr(p, "skills_known", []) or []
    loadout = list(getattr(p, "skills_loadout", []) or [])
    pending = bool(getattr(p, "pending_skill_choice", False))

    text = [
        "üèõÔ∏è <b>–ì—ñ–ª—å–¥—ñ—è –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç—ñ–≤</b>",
        "–¢—É—Ç –≤–∏ –∫–µ—Ä—É—î—Ç–µ –ø–µ—Ä–µ–ª—ñ–∫–æ–º —É–º—ñ–Ω—å —ñ –Ω–∞–±–æ—Ä–æ–º –∞–∫—Ç–∏–≤–Ω–∏—Ö —É–º—ñ–Ω—å —É –±–æ—é.",
        "",
        f"–ê–∫—Ç–∏–≤–Ω—ñ —Å–ª–æ—Ç–∏ ({len(loadout)}/{SKILL_SLOT_MAX}):",
        _render_loadout(p),
        "",
        "–í—ñ–¥–æ–º—ñ —É–º—ñ–Ω–Ω—è:",
        _render_known(p),
    ]

    rows = []
    # –î–æ–¥–∞—Ç–∏/–∑–Ω—è—Ç–∏ –∑ –ª–æ–∞–¥–∞—É—Ç—É
    if known:
        rows.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –≤ –ª–æ–∞–¥–∞—É—Ç", callback_data="guild:add")])
    if loadout:
        rows.append([InlineKeyboardButton("‚ûñ –ó–Ω—è—Ç–∏ –∑ –ª–æ–∞–¥–∞—É—Ç—É", callback_data="guild:remove")])

    # –ù–∞–≤—á–∏—Ç–∏—Å—è –Ω–æ–≤–æ–º—É (—è–∫—â–æ —î –ø—Ä–∞–≤–æ –≤–∏–±–æ—Ä—É)
    if pending:
        rows.append([InlineKeyboardButton("üÜï –í–∏–≤—á–∏—Ç–∏ –Ω–æ–≤–µ –≤–º—ñ–Ω–Ω—è", callback_data="guild:learn")])

    # –°–∫–∏–Ω—É—Ç–∏ –ª–æ–∞–¥–∞—É—Ç (–ø–ª–∞—Ç–Ω–æ/–∑–∞ —Ä–µ—Å—É—Ä—Å, –æ–ø—Ü—ñ–π–Ω–æ)
    rows.append([InlineKeyboardButton(f"‚ôªÔ∏è –°–∫–∏–Ω—É—Ç–∏ –ª–æ–∞–¥–∞—É—Ç (‚àí{GUILD_RESPEC_COST}–∑)", callback_data="guild:respec")])

    kb = InlineKeyboardMarkup(rows) if rows else None
    await update.message.reply_html("\n".join(text), reply_markup=kb)


async def on_guild_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Callback-–ª–æ–≥—ñ–∫–∞ –≥—ñ–ª—å–¥—ñ—ó."""
    q = update.callback_query
    await q.answer()
    p = ensure_player_ud(context.user_data)
    data = q.data  # guild:*

    if not _in_guild(context):
        await q.edit_message_text(f"–í–∏ –Ω–µ –≤ {LOC_GUILD}. –ó–∞–π–¥—ñ—Ç—å —Ç—É–¥–∏ —á–µ—Ä–µ–∑ /travel.")
        return

    # –ü—ñ–¥–º–µ–Ω—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –ª–æ–∞–¥–∞—É—Ç—É
    if data == "guild:add":
        known = list(getattr(p, "skills_known", []) or [])
        loadout = list(getattr(p, "skills_loadout", []) or [])
        free = [s for s in known if s not in loadout]
        if not free:
            await q.edit_message_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —É–º—ñ–Ω—å, —è–∫—ñ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏.", parse_mode=ParseMode.HTML)
            return
        opts = [(f"‚ûï {s}", f"guild:addpick:{s}") for s in free]
        await q.edit_message_text(
            "–û–±–µ—Ä—ñ—Ç—å —É–º—ñ–Ω–Ω—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–±–æ—Ä—É:",
            reply_markup=_kb(opts),  # –±–µ–∑ –ø—Ä–µ—Ñ—ñ–∫—Å–∞ ‚Äî callback_data –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è —è–∫ —É opts
        )
        return

    if data.startswith("guild:addpick:"):
        name = data.split(":", 2)[2]
        loadout = list(getattr(p, "skills_loadout", []) or [])
        if name in loadout:
            await q.edit_message_text("–¶–µ —É–º—ñ–Ω–Ω—è –≤–∂–µ –≤ –Ω–∞–±–æ—Ä—ñ.", parse_mode=ParseMode.HTML)
            return
        if len(loadout) >= SKILL_SLOT_MAX:
            await q.edit_message_text(f"–î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç {SKILL_SLOT_MAX} –∞–∫—Ç–∏–≤–Ω–∏—Ö —É–º—ñ–Ω—å.", parse_mode=ParseMode.HTML)
            return
        loadout.append(name)
        p.skills_loadout = loadout
        context.user_data["player"] = p.asdict()
        await q.edit_message_text(f"‚úÖ –î–æ–¥–∞–Ω–æ –≤ –ª–æ–∞–¥–∞—É—Ç: <b>{name}</b>.", parse_mode=ParseMode.HTML)
        return

    # –ü—ñ–¥–º–µ–Ω—é –∑–Ω—è—Ç—Ç—è –∑ –ª–æ–∞–¥–∞—É—Ç—É
    if data == "guild:remove":
        loadout = list(getattr(p, "skills_loadout", []) or [])
        if not loadout:
            await q.edit_message_text("–õ–æ–∞–¥–∞—É—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π.", parse_mode=ParseMode.HTML)
            return
        opts = [(f"‚ûñ {s}", f"guild:rempick:{s}") for s in loadout]
        await q.edit_message_text(
            "–û–±–µ—Ä—ñ—Ç—å —É–º—ñ–Ω–Ω—è –¥–ª—è –∑–Ω—è—Ç—Ç—è –∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–±–æ—Ä—É:",
            reply_markup=_kb(opts),
        )
        return

    if data.startswith("guild:rempick:"):
        name = data.split(":", 2)[2]
        loadout = list(getattr(p, "skills_loadout", []) or [])
        if name not in loadout:
            await q.edit_message_text("–£–º—ñ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î –≤ –Ω–∞–±–æ—Ä—ñ.", parse_mode=ParseMode.HTML)
            return
        loadout = [s for s in loadout if s != name]
        p.skills_loadout = loadout
        context.user_data["player"] = p.asdict()
        await q.edit_message_text(f"‚úÖ –ó–Ω—è—Ç–æ –∑ –ª–æ–∞–¥–∞—É—Ç—É: <b>{name}</b>.", parse_mode=ParseMode.HTML)
        return

    # –í–∏–≤—á–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —É–º—ñ–Ω–Ω—è (–∫–æ–ª–∏ pending_skill_choice=True)
    if data == "guild:learn":
        cls = getattr(p, "class_name", None)
        pool = list(CLASS_SKILLS.get(cls, {}).keys())
        known = set(getattr(p, "skills_known", []) or [])
        choices = [s for s in pool if s not in known]
        if not getattr(p, "pending_skill_choice", False):
            await q.edit_message_text("–ó–∞—Ä–∞–∑ —É –≤–∞—Å –Ω–µ–º–∞—î –Ω–æ–≤–æ–≥–æ –≤–∏–±–æ—Ä—É —É–º—ñ–Ω–Ω—è.", parse_mode=ParseMode.HTML)
            return
        if not choices:
            await q.edit_message_text("–î–ª—è –≤–∞—à–æ–≥–æ –∫–ª–∞—Å—É –Ω–æ–≤–∏—Ö —É–º—ñ–Ω—å –Ω–µ–º–∞—î.", parse_mode=ParseMode.HTML)
            p.pending_skill_choice = False
            context.user_data["player"] = p.asdict()
            return
        opts = [(f"üÜï {s}", f"guild:learnpick:{s}") for s in choices[:6]]  # –ø–æ–∫–∞–∑—É—î–º–æ –¥–æ 6
        await q.edit_message_text(
            "–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–µ —É–º—ñ–Ω–Ω—è –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è:",
            reply_markup=_kb(opts),
        )
        return

    if data.startswith("guild:learnpick:"):
        name = data.split(":", 2)[2]
        known = list(getattr(p, "skills_known", []) or [])
        if name in known:
            await q.edit_message_text("–¶–µ —É–º—ñ–Ω–Ω—è –≤–∂–µ –≤—ñ–¥–æ–º–µ.", parse_mode=ParseMode.HTML)
            return
        known.append(name)
        p.skills_known = known
        p.pending_skill_choice = False
        context.user_data["player"] = p.asdict()
        await q.edit_message_text(f"üéì –í–∏–≤—á–µ–Ω–æ –Ω–æ–≤–µ —É–º—ñ–Ω–Ω—è: <b>{name}</b>!", parse_mode=ParseMode.HTML)
        return

    # –°–∫–∏–¥–∞–Ω–Ω—è –ª–æ–∞–¥–∞—É—Ç—É –∑–∞ –∑–æ–ª–æ—Ç–æ
    if data == "guild:respec":
        if p.gold < GUILD_RESPEC_COST:
            await q.edit_message_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ª–æ–∞–¥–∞—É—Ç—É.", parse_mode=ParseMode.HTML)
            return
        p.gold -= GUILD_RESPEC_COST
        p.skills_loadout = []
        context.user_data["player"] = p.asdict()
        await q.edit_message_text("‚ôªÔ∏è –õ–æ–∞–¥–∞—É—Ç —Å–∫–∏–Ω—É—Ç–æ. –í–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–æ–≤—É –æ–±—Ä–∞—Ç–∏ —É–º—ñ–Ω–Ω—è.", parse_mode=ParseMode.HTML)
        return

    # –§–æ–ª–±–µ–∫
    await q.edit_message_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –≥—ñ–ª—å–¥—ñ—ó.")
