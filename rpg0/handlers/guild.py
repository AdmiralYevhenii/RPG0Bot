# -*- coding: utf-8 -*-
from __future__ import annotations
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from ..models import ensure_player_ud
from ..config import SKILL_SLOT_MAX
from ..utils.skills import (
    skills_for_class, pick_new_skill_options, add_to_loadout, remove_from_loadout
)

GUILD_LOC_NAME = "–ì—ñ–ª—å–¥—ñ—è –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç—ñ–≤"

def _kb(rows): return InlineKeyboardMarkup(rows)

def _guild_text(p) -> str:
    known = ", ".join(p.skills_known) if p.skills_known else "‚Äî –Ω–µ–º–∞—î ‚Äî"
    load = ", ".join(p.skills_loadout) if p.skills_loadout else "‚Äî –ø–æ—Ä–æ–∂–Ω—å–æ ‚Äî"
    return (f"üèõÔ∏è <b>–ì—ñ–ª—å–¥—ñ—è –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç—ñ–≤</b>\n"
            f"–ö–ª–∞—Å: {p.class_name or '‚Äî'}\n"
            f"–í—ñ–¥–æ–º—ñ –≤–º—ñ–Ω–Ω—è: {known}\n"
            f"–ù–∞–±—ñ—Ä (–¥–æ {SKILL_SLOT_MAX}): {load}\n"
            f"{'üÜï –î–æ—Å—Ç—É–ø–Ω–∏–π –≤–∏–±—ñ—Ä –Ω–æ–≤–æ–≥–æ –≤–º—ñ–Ω–Ω—è!' if p.pending_skill_choice else ''}")

async def guild(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    p = ensure_player_ud(context.user_data)
    if context.user_data.get("location") != GUILD_LOC_NAME:
        await update.message.reply_html(
            f"üèõÔ∏è –í–∏ –Ω–µ –≤ –≥—ñ–ª—å–¥—ñ—ó. –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É –ª–æ–∫–∞—Ü—ñ—é ‚Äú{GUILD_LOC_NAME}‚Äù —á–µ—Ä–µ–∑ /travel."
        )
        return
    await update.message.reply_html(
        _guild_text(p),
        reply_markup=_kb([
            [InlineKeyboardButton("üìö –ú–æ—ó –≤–º—ñ–Ω–Ω—è", callback_data="guild:skills")],
            [InlineKeyboardButton("üéí –ù–∞–±—ñ—Ä —É –±—ñ–π", callback_data="guild:loadout")],
            [InlineKeyboardButton("‚ú® –í–∏–≤—á–∏—Ç–∏ –Ω–æ–≤–µ", callback_data="guild:learn")],
        ])
    )

async def on_guild_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    p = ensure_player_ud(context.user_data)
    if context.user_data.get("location") != GUILD_LOC_NAME:
        await q.edit_message_text("–°—é–¥–∏ –º–æ–∂–Ω–∞ –∑–∞—Ö–æ–¥–∏—Ç–∏ –ª–∏—à–µ –ø–µ—Ä–µ–±—É–≤–∞—é—á–∏ –≤ –ª–æ–∫–∞—Ü—ñ—ó –ì—ñ–ª—å–¥—ñ—ó.")
        return

    data = q.data.split(":", 1)[1]

    if data == "skills":
        pool = skills_for_class(p.class_name)
        lines = [f"‚Ä¢ <b>{name}</b> (–ö–î {spec['cd']}): {spec['desc']}" for name, spec in pool.items()]
        await q.edit_message_text(
            "üìö –ö–ª–∞—Å–æ–≤—ñ –≤–º—ñ–Ω–Ω—è:\n" + ("\n".join(lines) if lines else "‚Äî –Ω–µ–º–∞—î ‚Äî"),
            parse_mode=ParseMode.HTML,
            reply_markup=_kb([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="guild:menu")]])
        )
        return

    if data == "loadout":
        rows = []
        for name in (p.skills_known or []):
            if name not in (p.skills_loadout or []):
                rows.append([InlineKeyboardButton(f"‚ûï –î–æ–¥–∞—Ç–∏: {name}", callback_data=f"guild:add:{name}")])
        for name in (p.skills_loadout or []):
            rows.append([InlineKeyboardButton(f"‚ûñ –ü—Ä–∏–±—Ä–∞—Ç–∏: {name}", callback_data=f"guild:rem:{name}")])
        await q.edit_message_text(
            _guild_text(p), parse_mode=ParseMode.HTML,
            reply_markup=_kb(rows or [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="guild:menu")]])
        )
        return

    if data.startswith("add:"):
        name = data.split(":", 1)[1]
        ok, msg = add_to_loadout(p, name, SKILL_SLOT_MAX)
        context.user_data["player"] = p.asdict()
        await q.edit_message_text(
            f"{msg}\n\n" + _guild_text(p), parse_mode=ParseMode.HTML,
            reply_markup=_kb([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="guild:loadout")]])
        )
        return

    if data.startswith("rem:"):
        name = data.split(":", 1)[1]
        ok, msg = remove_from_loadout(p, name)
        context.user_data["player"] = p.asdict()
        await q.edit_message_text(
            f"{msg}\n\n" + _guild_text(p), parse_mode=ParseMode.HTML,
            reply_markup=_kb([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="guild:loadout")]])
        )
        return

    if data == "learn":
        if not p.pending_skill_choice:
            await q.edit_message_text(
                "–ù–∞—Ä–∞–∑—ñ –Ω–æ–≤—ñ –≤–º—ñ–Ω–Ω—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ. –ü—ñ–¥–≤–∏—â—É–π—Ç–µ —Ä—ñ–≤–µ–Ω—å!",
                reply_markup=_kb([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="guild:menu")]])
            )
            return
        options = pick_new_skill_options(p)
        if not options:
            await q.edit_message_text(
                "–£—Å—ñ –≤–º—ñ–Ω–Ω—è –≤–∞—à–æ–≥–æ –∫–ª–∞—Å—É –≤–∂–µ –≤–∏–≤—á–µ–Ω—ñ!",
                reply_markup=_kb([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="guild:menu")]])
            )
            return
        rows = [[InlineKeyboardButton(f"–í–∏–≤—á–∏—Ç–∏: {n}", callback_data=f"guild:take:{n}")] for n in options]
        rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="guild:menu")])
        await q.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–µ –≤–º—ñ–Ω–Ω—è:", reply_markup=_kb(rows))
        return

    if data.startswith("take:"):
        name = data.split(":", 1)[1]
        if name not in (p.skills_known or []):
            p.skills_known.append(name)
        p.pending_skill_choice = False
        context.user_data["player"] = p.asdict()
        await q.edit_message_text(
            f"üéâ –í–∏–≤—á–µ–Ω–æ –Ω–æ–≤–µ –≤–º—ñ–Ω–Ω—è: <b>{name}</b>\n\n" + _guild_text(p),
            parse_mode=ParseMode.HTML,
            reply_markup=_kb([[InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ –≤ –Ω–∞–±—ñ—Ä", callback_data=f"guild:add:{name}")],
                              [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="guild:menu")]])
        )
        return

    if data == "menu":
        await q.edit_message_text(
            _guild_text(p), parse_mode=ParseMode.HTML,
            reply_markup=_kb([
                [InlineKeyboardButton("üìö –ú–æ—ó –≤–º—ñ–Ω–Ω—è", callback_data="guild:skills")],
                [InlineKeyboardButton("üéí –ù–∞–±—ñ—Ä —É –±—ñ–π", callback_data="guild:loadout")],
                [InlineKeyboardButton("‚ú® –í–∏–≤—á–∏—Ç–∏ –Ω–æ–≤–µ", callback_data="guild:learn")],
            ])
        )
        return
