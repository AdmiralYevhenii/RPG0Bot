# -*- coding: utf-8 -*-
from __future__ import annotations

import random
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler

from ..models import dict_to_player, dict_to_enemy

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
CHOOSING_ACTION, ENEMY_TURN, LOOTING = range(3)


# ----- –ö—É–±–∏–∫–∏ -----

def roll_damage(atk: int, defense: int) -> int:
    base = max(0, atk - defense)
    variance = random.randint(-2, 2)
    return max(1, base + variance)

def roll_player_attack(atk: int, defense: int) -> tuple[int, bool]:
    crit = random.random() < 0.15
    dmg = roll_damage(atk, defense)
    if crit:
        dmg *= 2
    return dmg, crit


# ----- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ -----

def battle_keyboard(p=None, in_battle: bool = True, battle_state: dict | None = None) -> InlineKeyboardMarkup:
    """
    –ü—ñ–¥ —á–∞—Å –±–æ—é –≤—Å—ñ callback_data –º–∞—é—Ç—å –ø—Ä–µ—Ñ—ñ–∫—Å 'battle:'.
    –ü—ñ—Å–ª—è –±–æ—é –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É 'continue' (–±–µ–∑ –ø—Ä–µ—Ñ—ñ–∫—Å–∞) ‚Äî —ó—ó –ª–æ–≤–∏—Ç—å LOOTING handler –∑ pattern="^continue$".
    """
    if not in_battle:
        return InlineKeyboardMarkup([[InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data="continue")]])

    rows = [
        [
            InlineKeyboardButton("‚öîÔ∏è –ê—Ç–∞–∫–∞",  callback_data="battle:attack"),
            InlineKeyboardButton("üõ°Ô∏è –ó–∞—Ö–∏—Å—Ç", callback_data="battle:defend"),
        ],
        [
            InlineKeyboardButton("üß™ –ó—ñ–ª–ª—è",  callback_data="battle:potion"),
            InlineKeyboardButton("üèÉ –í—Ç–µ–∫—Ç–∏", callback_data="battle:run"),
        ],
    ]

    # –ö–Ω–æ–ø–∫–∏ —É–º—ñ–Ω—å —ñ–∑ –ö–î (–¥–æ 3), —É—Å—ñ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º battle:
    if p:
        cds = (battle_state or {}).get("cooldowns", {})
        line = []
        for name in (getattr(p, "skills_loadout", []) or [])[:3]:
            cd = cds.get(name, 0)
            label = f"‚ú® {name}{' ['+str(cd)+']' if cd > 0 else ''}"
            line.append(InlineKeyboardButton(label, callback_data=f"battle:skill:{name}"))
            if len(line) == 2:
                rows.append(line)
                line = []
        if line:
            rows.append(line)

    return InlineKeyboardMarkup(rows)


# ----- –•—ñ–¥ –≥—Ä–∞–≤—Ü—è -----

async def on_battle_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    p = dict_to_player(context.user_data.get("player"))
    e = dict_to_enemy(context.user_data.get("enemy"))
    battle_state = context.user_data.setdefault("battle", {"cooldowns": {}, "e_status": {}, "p_status": {}})

    data = query.data  # "battle:attack" / "battle:defend" / "battle:skill:<name>" / "battle:potion" / "battle:run"
    parts = data.split(":", 2)
    action = parts[1] if len(parts) > 1 else data

    context.user_data["defending"] = False
    text = ""

    if action == "attack":
        from ..utils.skills import consume_player_temp_buffs, turn_tick_cooldowns
        atk_b, _ = consume_player_temp_buffs(p, battle_state)
        dmg, crit = roll_player_attack(p.atk + atk_b, e.defense)
        e.hp -= dmg
        text = f"‚öîÔ∏è –í–∏ –≤–¥–∞—Ä–∏–ª–∏ {e.name} –Ω–∞ {dmg} —à–∫–æ–¥–∏." + (" <b>–ö—Ä–∏—Ç!</b>" if crit else "")
        turn_tick_cooldowns(battle_state)

    elif action == "defend":
        context.user_data["defending"] = True
        text = "üõ°Ô∏è –í–∏ —É —Å—Ç—ñ–π—Ü—ñ –∑–∞—Ö–∏—Å—Ç—É ‚Äî —à–∫–æ–¥–∞ —Ü—å–æ–≥–æ —Ö–æ–¥—É –ø–æ –≤–∞–º –∑–º–µ–Ω—à–µ–Ω–∞ –≤–¥–≤—ñ—á—ñ."
        from ..utils.skills import turn_tick_cooldowns
        turn_tick_cooldowns(battle_state)

    elif action == "skill":
        sname = parts[2] if len(parts) > 2 else ""
        from ..utils.skills import apply_skill, turn_tick_cooldowns
        text = apply_skill(p, e, sname, battle_state)
        turn_tick_cooldowns(battle_state)

    elif action == "potion":
        healed = p.heal()
        context.user_data["player"] = p.asdict()
        if healed == 0:
            text = "üß™ –ó—ñ–ª–ª—è –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ HP –ø–æ–≤–Ω–µ. –•—ñ–¥ –≤—Ç—Ä–∞—á–µ–Ω–æ."
        else:
            text = f"üß™ –í–∏ –≤–∏–ø–∏–ª–∏ –∑—ñ–ª–ª—è —Ç–∞ –≤—ñ–¥–Ω–æ–≤–∏–ª–∏ {healed} HP. ({p.hp}/{p.max_hp})"
        from ..utils.skills import turn_tick_cooldowns
        turn_tick_cooldowns(battle_state)

    elif action == "run":
        if random.random() < 0.5:
            # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –±–æ—é
            context.user_data.pop("enemy", None)
            context.user_data.pop("battle", None)
            await query.edit_message_text("üèÉ –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—Ç–µ–∫–ª–∏ –≤—ñ–¥ –±–æ—é.")
            return ConversationHandler.END
        else:
            text = "‚ùå –í—Ç–µ–∫—Ç–∏ –Ω–µ –≤–¥–∞–ª–æ—Å—è!"
            from ..utils.skills import turn_tick_cooldowns
            turn_tick_cooldowns(battle_state)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–º–µ—Ä—Ç—ñ –≤–æ—Ä–æ–≥–∞
    if e.hp <= 0:
        reward_exp = e.exp_reward
        reward_gold = e.gold_reward
        level, leveled = p.gain_exp(reward_exp)
        p.gold += reward_gold

        context.user_data["player"] = p.asdict()
        context.user_data.pop("enemy", None)
        context.user_data.pop("battle", None)  # –∑–∞–∫—Ä–∏–≤–∞—î–º–æ —Å—Ç–∞–Ω –±–æ—é

        summary = f"üíÄ {e.name} –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!\n+{reward_exp} EXP, +{reward_gold} –∑–æ–ª–æ—Ç–∞.\n"
        if leveled:
            summary += f"‚¨ÜÔ∏è –†—ñ–≤–µ–Ω—å –ø—ñ–¥–≤–∏—â–µ–Ω–æ –¥–æ {level}! HP/–ê—Ç–∞–∫–∞/–ó–∞—Ö–∏—Å—Ç –∑—Ä–æ—Å–ª–∏, HP –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {p.max_hp}."
            if getattr(p, "pending_skill_choice", False):
                summary += "\nüÜï –î–æ—Å—Ç—É–ø–Ω–∏–π –≤–∏–±—ñ—Ä –Ω–æ–≤–æ–≥–æ –≤–º—ñ–Ω–Ω—è —É –ì—ñ–ª—å–¥—ñ—ó (/guild)."

        await query.edit_message_text(
            text + "\n\n" + summary,
            reply_markup=battle_keyboard(in_battle=False),
            parse_mode=ParseMode.HTML,
        )
        return LOOTING

    # –û–Ω–æ–≤–∏—Ç–∏ –≤–æ—Ä–æ–≥–∞, –ø–µ—Ä–µ–π—Ç–∏ –¥–æ —Ö–æ–¥—É –≤–æ—Ä–æ–≥–∞
    context.user_data["enemy"] = e.__dict__
    status = (
        f"<b>{p.name}</b> HP: {p.hp}/{p.max_hp}\n"
        f"<b>{e.name}</b> HP: {e.hp}/{e.max_hp}"
    )
    await query.edit_message_text(
        text + "\n\n" + status + "\n\n–•—ñ–¥ –≤–æ—Ä–æ–≥–∞...",
        parse_mode=ParseMode.HTML,
    )
    return await enemy_turn(update, context)


# ----- –•—ñ–¥ –≤–æ—Ä–æ–≥–∞ -----

async def enemy_turn(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    p = dict_to_player(context.user_data.get("player"))
    e = dict_to_enemy(context.user_data.get("enemy"))
    battle_state = context.user_data.setdefault("battle", {"cooldowns": {}, "e_status": {}, "p_status": {}})

    if not e.is_alive():
        return LOOTING

    # –ï—Ñ–µ–∫—Ç–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ö–æ–¥—É –≤–æ—Ä–æ–≥–∞
    from ..utils.skills import apply_start_of_enemy_turn_effects, enemy_is_stunned, turn_tick_cooldowns
    start_txt = apply_start_of_enemy_turn_effects(e, battle_state)
    if not e.is_alive():
        context.user_data["enemy"] = e.__dict__
        turn_tick_cooldowns(battle_state)
        await update.effective_message.reply_html(
            (start_txt + "\n" if start_txt else "") + "–í–æ—Ä–æ–≥ —Å—Ç—ñ–∫ –∫—Ä–æ–≤‚Äô—é —Ç–∞ –≤–ø–∞–≤!",
            reply_markup=battle_keyboard(in_battle=False),
        )
        return LOOTING

    if enemy_is_stunned(battle_state):
        context.user_data["enemy"] = e.__dict__
        turn_tick_cooldowns(battle_state)
        await update.effective_message.reply_html(
            (start_txt + "\n" if start_txt else "") + f"üòµ {e.name} –æ–≥–ª—É—à–µ–Ω–∏–π —ñ –ø—Ä–æ–ø—É—Å–∫–∞—î —Ö—ñ–¥!\n\n–í–∞—à —Ö—ñ–¥:",
            reply_markup=battle_keyboard(p, True, battle_state),
        )
        return CHOOSING_ACTION

    # –ë–∞–∑–æ–≤–∞ –∞—Ç–∞–∫–∞ –≤–æ—Ä–æ–≥–∞
    special = random.random() < 0.2
    atk = e.atk + (3 if special else 0)

    # –í—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –±–∞—Ñ –∑–∞—Ö–∏—Å—Ç—É –≥—Ä–∞–≤—Ü—è (–≤—ñ–¥ —É–º—ñ–Ω—å/—Å—Ç—ñ–π–∫–∏)
    pst = battle_state.setdefault("p_status", {})
    def_up_val = pst.get("def_up_val", 0) if pst.get("def_up") else 0

    dmg = roll_damage(atk, max(0, p.defense + def_up_val))
    if context.user_data.get("defending"):
        dmg = max(1, dmg // 2)

    p.hp -= dmg
    context.user_data["player"] = p.asdict()
    context.user_data["enemy"] = e.__dict__

    # –ë–∞—Ñ –∑–∞—Ö–∏—Å—Ç—É —Å–ø—Ä–∞—Ü—å–æ–≤—É—î –Ω–∞ –æ–¥–∏–Ω –≤—Ö—ñ–¥–Ω–∏–π —É–¥–∞—Ä —ñ –≥–∞—Å–∏—Ç—å—Å—è
    pst["def_up"] = 0
    pst["def_up_val"] = 0

    action_text = (
        (start_txt + "\n" if start_txt else "") +
        f"üßü‚Äç‚ôÇÔ∏è {e.name} {'–∑–∞–≤–¥–∞—î –∫—Ä–∏—Ç–∏—á–Ω–æ—ó –∞—Ç–∞–∫–∏' if special else '–±\'—î'} –Ω–∞ {dmg} —à–∫–æ–¥–∏!\n"
        f"<b>{p.name}</b> HP: {p.hp}/{p.max_hp}\n"
        f"<b>{e.name}</b> HP: {e.hp}/{e.max_hp}"
    )

    if p.hp <= 0:
        context.user_data.pop("enemy", None)
        context.user_data.pop("battle", None)
        await update.effective_message.reply_html(
            action_text + "\n\n‚ò†Ô∏è –í–∏ –∑–∞–≥–∏–Ω—É–ª–∏. /newgame ‚Äî —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É."
        )
        return ConversationHandler.END

    # –ö—ñ–Ω–µ—Ü—å —Ö–æ–¥—É –≤–æ—Ä–æ–≥–∞: —Ç—ñ–∫ –ö–î
    from ..utils.skills import turn_tick_cooldowns
    turn_tick_cooldowns(battle_state)

    await update.effective_message.reply_html(
        action_text + "\n\n–í–∞—à —Ö—ñ–¥: –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é.",
        reply_markup=battle_keyboard(p, True, battle_state),
    )
    return CHOOSING_ACTION


# ----- –ü–æ—Å—Ç-–±–∏—Ç–≤–∞ -----

async def after_loot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text("‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–∏–≥–æ–¥—É! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /explore.")
    else:
        await update.message.reply_text("‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–∏–≥–æ–¥—É! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /explore.")
    return ConversationHandler.END
