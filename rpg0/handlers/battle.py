# -*- coding: utf-8 -*-
"""
–ë—ñ–π (ConversationHandler): –∞—Ç–∞–∫–∞/–∑–∞—Ö–∏—Å—Ç/–≤–º—ñ–Ω–Ω—è/–∑—ñ–ª–ª—è/–≤—Ç–µ–∫—Ç–∏, —Å—Ç–∞—Ç—É—Å–∏, —ñ–Ω—ñ—Ü—ñ–∞—Ç–∏–≤–∞.
"""
import random
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler, CommandHandler
from ..models import ensure_player_ud, dict_to_enemy, Enemy
from ..utils.equipment import damage_durability_on_hit
from ..config import BLEED_TURNS, STUN_TURNS

CHOOSING_ACTION, ENEMY_TURN, LOOTING = range(3)

def battle_keyboard(in_battle: bool = True) -> InlineKeyboardMarkup:
    if in_battle:
        buttons = [
            [InlineKeyboardButton("‚öîÔ∏è –ê—Ç–∞–∫–∞", callback_data="battle:attack"),
             InlineKeyboardButton("üõ°Ô∏è –ó–∞—Ö–∏—Å—Ç", callback_data="battle:defend")],
            [InlineKeyboardButton("‚ú® –í–º—ñ–Ω–Ω—è", callback_data="battle:skill"),
             InlineKeyboardButton("üß™ –ó—ñ–ª–ª—è", callback_data="battle:potion")],
            [InlineKeyboardButton("üèÉ –í—Ç–µ–∫—Ç–∏", callback_data="battle:run")],
        ]
    else:
        buttons = [[InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data="battle:continue")]]
    return InlineKeyboardMarkup(buttons)

def roll_damage(atk: int, defense: int) -> int:
    base = max(1, atk - defense + random.randint(-2, 2))
    return base

async def explore_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ /explore —É –∑–æ–≤–Ω—ñ—à–Ω—å–æ–º—É –º–æ–¥—É–ª—ñ ‚Äî —Ç—É—Ç –ª–∏—à–µ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞, –≤—Å–µ —ñ–Ω—à–µ —Ä–æ–±–∏—Ç—å—Å—è —Ç–∞–º."""
    # —Ä–µ–∑–µ—Ä–≤, —è–∫—â–æ —Ç—Ä–µ–±–∞
    return ConversationHandler.END

async def on_battle_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()
    p = ensure_player_ud(context.user_data)
    e = dict_to_enemy(context.user_data.get("enemy"))

    data = q.data.split(":",1)[1]
    context.user_data["defending"] = False
    txt = ""

    if data == "attack":
        dmg, crit = p.roll_player_attack(e.defense)
        e.hp -= dmg
        damage_durability_on_hit(p)
        txt = f"‚öîÔ∏è –í–∏ –≤–¥–∞—Ä–∏–ª–∏ {e.name} –Ω–∞ {dmg} —à–∫–æ–¥–∏." + (" <b>–ö—Ä–∏—Ç!</b>" if crit else "")
    elif data == "defend":
        context.user_data["defending"] = True
        txt = "üõ°Ô∏è –í–∏ –≤ —Å—Ç—ñ–π—Ü—ñ –∑–∞—Ö–∏—Å—Ç—É ‚Äî –æ—Ç—Ä–∏–º–∞–Ω–∞ —à–∫–æ–¥–∞ —Ü—å–æ–≥–æ —Ö–æ–¥—É –∑–º–µ–Ω—à–µ–Ω–∞."
    elif data == "skill":
        # –ø–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–∏–π —à–∞–±–ª–æ–Ω: —è–∫—â–æ —î —Å–ª–æ—Ç–æ–≤—ñ –Ω–∞–≤–∏—á–∫–∏ ‚Äî –¥–æ–¥–∞—î–º–æ +3 –∞—Ç–∞–∫–∏
        dmg, crit = p.roll_player_attack(e.defense)
        bonus = 3 if p.slotted_skills else 0
        e.hp -= (dmg + bonus)
        damage_durability_on_hit(p)
        txt = f"‚ú® –í–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–ª–∏ –≤–º—ñ–Ω–Ω—è! {e.name} –æ—Ç—Ä–∏–º—É—î {dmg + bonus} —à–∫–æ–¥–∏."
    elif data == "potion":
        healed = p.heal()
        context.user_data["player"] = p.asdict()
        if healed == 0:
            txt = "üß™ –ó—ñ–ª–ª—è –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ HP –ø–æ–≤–Ω–µ. –•—ñ–¥ –≤—Ç—Ä–∞—á–µ–Ω–æ."
        else:
            txt = f"üß™ –í–∏ –≤–∏–ø–∏–ª–∏ –∑—ñ–ª–ª—è —Ç–∞ –≤—ñ–¥–Ω–æ–≤–∏–ª–∏ {healed} HP. ({p.hp}/{p.max_hp})"
    elif data == "run":
        if random.random() < 0.5:
            await q.edit_message_text("üèÉ –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—Ç–µ–∫–ª–∏ –≤—ñ–¥ –±–æ—é.")
            context.user_data.pop("enemy", None)
            return ConversationHandler.END
        else:
            txt = "‚ùå –í—Ç–µ–∫—Ç–∏ –Ω–µ –≤–¥–∞–ª–æ—Å—è!"
    elif data == "continue":
        await q.edit_message_text("‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–∏–≥–æ–¥—É! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /explore.")
        return ConversationHandler.END

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–º–µ—Ä—Ç—ñ –≤–æ—Ä–æ–≥–∞
    if e.hp <= 0:
        reward_exp = e.exp_reward; reward_gold = e.gold_reward
        lvl_before = p.level
        level, leveled = p.gain_exp(reward_exp)
        p.gold += reward_gold
        context.user_data["player"] = p.asdict()
        context.user_data.pop("enemy", None)
        summary = f"üíÄ {e.name} –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!\n+{reward_exp} EXP, +{reward_gold} –∑–æ–ª–æ—Ç–∞.\n"
        if leveled:
            summary += f"‚¨ÜÔ∏è –†—ñ–≤–µ–Ω—å –ø—ñ–¥–≤–∏—â–µ–Ω–æ –¥–æ {level}! –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑—Ä–æ—Å–ª–∏, HP –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {p.max_hp}.\n"
        await q.edit_message_text(txt + "\n\n" + summary, reply_markup=battle_keyboard(False), parse_mode=ParseMode.HTML)
        return LOOTING

    # –û–Ω–æ–≤–∏–º–æ –≤–æ—Ä–æ–≥–∞ —ñ —Ö—ñ–¥ –≤–æ—Ä–æ–≥–∞
    context.user_data["enemy"] = e.__dict__
    status = f"<b>{p.name}</b> HP: {p.hp}/{p.max_hp}\n<b>{e.name}</b> HP: {e.hp}/{e.max_hp}"
    await q.edit_message_text(txt + "\n\n" + status + "\n\n–•—ñ–¥ –≤–æ—Ä–æ–≥–∞...", parse_mode=ParseMode.HTML)
    return await enemy_turn(update, context)

async def enemy_turn(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    p = ensure_player_ud(context.user_data)
    e = dict_to_enemy(context.user_data.get("enemy"))

    if not e.is_alive():
        return LOOTING

    special = random.random() < 0.2
    atk = e.atk + (3 if special else 0)
    dmg = roll_damage(atk, p.defense)
    if context.user_data.get("defending"):
        dmg = max(1, dmg // 2)

    p.hp -= dmg
    context.user_data["player"] = p.asdict()

    act = "–∑–∞–≤–¥–∞—î –∫—Ä–∏—Ç–∏—á–Ω–æ—ó –∞—Ç–∞–∫–∏" if special else "–±'—î"
    text = (f"üßü‚Äç‚ôÇÔ∏è {e.name} {act} –Ω–∞ {dmg} —à–∫–æ–¥–∏!\n"
            f"<b>{p.name}</b> HP: {p.hp}/{p.max_hp}\n<b>{e.name}</b> HP: {e.hp}/{e.max_hp}")

    if p.hp <= 0:
        context.user_data.pop("enemy", None)
        await update.effective_message.reply_html(text + "\n\n‚ò†Ô∏è –í–∏ –∑–∞–≥–∏–Ω—É–ª–∏. /newgame ‚Äî —â–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É.")
        return ConversationHandler.END

    await update.effective_message.reply_html(text + "\n\n–í–∞—à —Ö—ñ–¥: –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é.", reply_markup=battle_keyboard(True))
    return CHOOSING_ACTION

async def after_loot(update, context):
    q = update.callback_query
    if q:
        await q.answer()
        await q.edit_message_text("‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–∏–≥–æ–¥—É! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /explore.")
    else:
        await update.message.reply_text("‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–∏–≥–æ–¥—É! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /explore.")
    return ConversationHandler.END
