# -*- coding: utf-8 -*-
from __future__ import annotations

import random
from typing import Tuple, List

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler

from ..models import dict_to_player, dict_to_enemy
from ..utils.loot import generate_loot
from ..utils.skills import (
    apply_skill,
    turn_tick_cooldowns,
    apply_start_of_enemy_turn_effects,
    enemy_is_stunned,
    consume_player_temp_buffs,
    clear_player_def_buff_after_enemy_turn,
)

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
CHOOSING_ACTION, ENEMY_TURN, LOOTING = range(3)

# ----- –ö—É–±–∏–∫–∏ -----

def roll_damage(atk: int, defense: int) -> int:
    """–ë–∞–∑–æ–≤–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —à–∫–æ–¥–∏: (atk - def) –∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é –≤–∞—Ä—ñ–∞—Ü—ñ—î—é, –º—ñ–Ω—ñ–º—É–º 1."""
    base = max(0, atk - defense)
    variance = random.randint(-2, 2)
    return max(1, base + variance)

def roll_player_attack(atk: int, defense: int) -> Tuple[int, bool]:
    """–ê—Ç–∞–∫–∞ –≥—Ä–∞–≤—Ü—è –∑ 15% –∫—Ä–∏—Ç–æ–º (√ó2)."""
    crit = random.random() < 0.15
    dmg = roll_damage(atk, defense)
    if crit:
        dmg *= 2
    return dmg, crit


# ----- –†–µ–Ω–¥–µ—Ä–∏ —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ -----

def _render_battle_header(p, e) -> str:
    return (
        f"‚öîÔ∏è <b>–ë–Ü–ô</b>\n"
        f"üë§ –í–∏: {p.name} ‚Äî HP {p.hp}/{p.max_hp} | ATK {p.atk} DEF {p.defense}\n"
        f"üëπ –í–æ—Ä–æ–≥: {e.name} ‚Äî HP {e.hp}/{e.max_hp} | ATK {e.atk} DEF {e.defense}\n"
    )

def _kb_main(battle_state: dict) -> InlineKeyboardMarkup:
    """–ì–æ–ª–æ–≤–Ω–µ –±–æ–π–æ–≤–µ –º–µ–Ω—é (–≤–∫–ª—é—á–∞—î –∫–Ω–æ–ø–∫—É –í–º—ñ–Ω–Ω—è)."""
    rows = [
        [InlineKeyboardButton("üó°Ô∏è –ê—Ç–∞–∫–∞",  callback_data="battle:attack")],
        [InlineKeyboardButton("üåÄ –í–º—ñ–Ω–Ω—è", callback_data="battle:skill")],
        [InlineKeyboardButton("üõ°Ô∏è –ó–∞—Ö–∏—Å—Ç", callback_data="battle:defend")],
        [InlineKeyboardButton("üß™ –ó—ñ–ª–ª—è",   callback_data="battle:potion")],
        [InlineKeyboardButton("üèÉ –í—Ç–µ–∫—Ç–∏",  callback_data="battle:run")],
    ]
    return InlineKeyboardMarkup(rows)

def _skill_cd(bstate: dict, name: str) -> int:
    cds = bstate.setdefault("cooldowns", {})
    return int(cds.get(name, 0) or 0)

def _kb_skills(p, bstate: dict) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –≤–∏–±–æ—Ä—É —É–º—ñ–Ω—å –∑ –ø–æ–∫–∞–∑–æ–º –ö–î, + –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥."""
    loadout = list(getattr(p, "skills_loadout", []) or [])
    rows: List[List[InlineKeyboardButton]] = []
    for s in loadout:
        cd = _skill_cd(bstate, s)
        label = f"üåÄ {s} (–ö–î {cd})" if cd > 0 else f"üåÄ {s}"
        rows.append([InlineKeyboardButton(label, callback_data=f"battle:skilluse:{s}")])
    rows.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="battle:back")])
    return InlineKeyboardMarkup(rows)


# ----- –ì–æ–ª–æ–≤–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –±–æ—é -----

async def on_battle_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ —É—Å—ñ—Ö callback'—ñ–≤ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º 'battle:'."""
    q = update.callback_query
    data = q.data if q else None

    if q:
        await q.answer()

    # –í–∏—Ç—è–≥—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –æ–±'—î–∫—Ç–∏
    p = dict_to_player(context.user_data.get("player"))
    e = dict_to_enemy(context.user_data.get("enemy"))
    b = context.user_data.setdefault("battle_state", {})

    # –ë–∞–∑–æ–≤–∏–π –≤–∏–≤—ñ–¥ (—Ö–µ–¥–µ—Ä)
    header = _render_battle_header(p, e)

    # ---- –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é / –ù–∞–≤—ñ–≥–∞—Ü—ñ—è ----
    if data == "battle:back":
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—é
        if q:
            await q.edit_message_text(header + "\n–í–∞—à —Ö—ñ–¥ ‚Äî –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é.", reply_markup=_kb_main(b), parse_mode=ParseMode.HTML)
        else:
            await update.message.reply_html(header + "\n–í–∞—à —Ö—ñ–¥ ‚Äî –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é.", reply_markup=_kb_main(b))
        return CHOOSING_ACTION

    if data == "battle:skill":
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø—ñ–¥–º–µ–Ω—é —É–º—ñ–Ω—å
        loadout = list(getattr(p, "skills_loadout", []) or [])
        if not loadout:
            txt = header + "\n–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —É–º—ñ–Ω—å —É –ª–æ–æ–¥–∞—É—Ç—ñ. –î–æ–¥–∞–π—Ç–µ —ó—Ö —É /guild."
            if q:
                await q.edit_message_text(txt, parse_mode=ParseMode.HTML, reply_markup=_kb_main(b))
            else:
                await update.message.reply_html(txt, reply_markup=_kb_main(b))
            return CHOOSING_ACTION

        if q:
            await q.edit_message_text(header + "\n–û–±–µ—Ä—ñ—Ç—å —É–º—ñ–Ω–Ω—è:", reply_markup=_kb_skills(p, b), parse_mode=ParseMode.HTML)
        else:
            await update.message.reply_html(header + "\n–û–±–µ—Ä—ñ—Ç—å —É–º—ñ–Ω–Ω—è:", reply_markup=_kb_skills(p, b))
        return CHOOSING_ACTION

    # ---- –ê—Ç–∞–∫–∞ ----
    if data == "battle:attack":
        # –ó‚Äô—ó–¥–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –±–∞—Ñ–∏ –∞—Ç–∞–∫–∏/–∑–∞—Ö–∏—Å—Ç—É –≥—Ä–∞–≤—Ü—è –Ω–∞ —Ü–µ–π —É–¥–∞—Ä
        atk_b, def_b = consume_player_temp_buffs(p, b)
        dmg, crit = roll_player_attack(p.atk + atk_b, e.defense)
        e.hp -= dmg

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–µ–π—Ç–∏
        context.user_data["player"] = p.asdict()
        context.user_data["enemy"] = e.asdict()

        text = header + f"\nüó°Ô∏è –í–∏ –∞—Ç–∞–∫—É—î—Ç–µ –≤–æ—Ä–æ–≥–∞ —Ç–∞ –∑–∞–≤–¥–∞—î—Ç–µ {dmg} —à–∫–æ–¥–∏{' (–ö–†–ò–¢!)' if crit else ''}."

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–º–µ—Ä—Ç—ñ –≤–æ—Ä–æ–≥–∞
        if e.hp <= 0:
            loot = generate_loot(context.user_data.get("location", ""))
            # –ü–µ—Ä–µ—Ö—ñ–¥ —É –ª—É—Ç-–µ–∫—Ä–∞–Ω
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üéí –ó–∞–±—Ä–∞—Ç–∏ –ª—É—Ç", callback_data="battle:take_loot")],
                [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data="battle:after_loot")],
            ])
            context.user_data["loot_pending"] = loot
            if q:
                await q.edit_message_text(text + "\n\nüíÄ –í–æ—Ä–æ–≥ –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!", parse_mode=ParseMode.HTML, reply_markup=kb)
            else:
                await update.message.reply_html(text + "\n\nüíÄ –í–æ—Ä–æ–≥ –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!", reply_markup=kb)
            return LOOTING

        # –•—ñ–¥ –≤–æ—Ä–æ–≥–∞
        return await _enemy_turn_after_player_action(update, context, prefix_text=text)

    # ---- –ó–∞—Ö–∏—Å—Ç ----
    if data == "battle:defend":
        # –ü—Ä–æ—Å—Ç–∏–π –æ–¥–Ω–æ—Ö–æ–¥–æ–≤–∏–π –±–∞—Ñ –∑–∞—Ö–∏—Å—Ç—É (+2)
        pst = b.setdefault("p_status", {})
        pst["def_up"] = 1
        pst["def_up_val"] = max(2, int(p.level / 2) + 1)  # —Ç—Ä—ñ—à–∫–∏ –º–∞—Å—à—Ç–∞–±—É—î–º–æ –∑ —Ä—ñ–≤–Ω–µ–º
        context.user_data["battle_state"] = b
        text = header + f"\nüõ°Ô∏è –í–∏ –∑–∞–π–º–∞—î—Ç–µ –æ–±–æ—Ä–æ–Ω–Ω—É —Å—Ç—ñ–π–∫—É: +{pst['def_up_val']} –¥–æ –∑–∞—Ö–∏—Å—Ç—É –Ω–∞ —Ü–µ–π —Ä–∞—É–Ω–¥."
        return await _enemy_turn_after_player_action(update, context, prefix_text=text)

    # ---- –ó—ñ–ª–ª—è ----
    if data == "battle:potion":
        healed = min(p.max_hp - p.hp, 8)  # –ø—Ä–æ—Å—Ç–µ –ª—ñ–∫—É–≤–∞–Ω–Ω—è
        p.hp += healed
        context.user_data["player"] = p.asdict()
        text = header + f"\nüß™ –í–∏ –≤–∏–ø–∏–≤–∞—î—Ç–µ –∑—ñ–ª–ª—è —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª—é—î—Ç–µ {healed} HP."
        return await _enemy_turn_after_player_action(update, context, prefix_text=text)

    # ---- –í—Ç–µ—á–∞ ----
    if data == "battle:run":
        # 50% –Ω–∞ –≤—Ç–µ—á—É
        if random.random() < 0.5:
            msg = header + "\nüèÉ –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—Ç–µ–∫–ª–∏ –∑ –±–æ—é."
            if q:
                await q.edit_message_text(msg, parse_mode=ParseMode.HTML)
            else:
                await update.message.reply_html(msg)
            return ConversationHandler.END
        else:
            text = header + "\nüèÉ –°–ø—Ä–æ–±–∞ –≤—Ç–µ—á—ñ –Ω–µ–≤–¥–∞–ª–∞!"
            return await _enemy_turn_after_player_action(update, context, prefix_text=text)

    # ---- –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —É–º—ñ–Ω–Ω—è ----
    if data and data.startswith("battle:skilluse:"):
        skill_name = data.split(":", 2)[2]
        loadout = list(getattr(p, "skills_loadout", []) or [])
        if skill_name not in loadout:
            txt = header + "\n–¶–µ —É–º—ñ–Ω–Ω—è –Ω–µ –≤—Ö–æ–¥–∏—Ç—å –¥–æ –≤–∞—à–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–±–æ—Ä—É."
            if q:
                await q.edit_message_text(txt, parse_mode=ParseMode.HTML, reply_markup=_kb_main(b))
            else:
                await update.message.reply_html(txt, reply_markup=_kb_main(b))
            return CHOOSING_ACTION

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ö–î
        if _skill_cd(b, skill_name) > 0:
            txt = header + "\n–í–º—ñ–Ω–Ω—è –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥—Ü—ñ."
            if q:
                await q.edit_message_text(txt, parse_mode=ParseMode.HTML, reply_markup=_kb_skills(p, b))
            else:
                await update.message.reply_html(txt, reply_markup=_kb_skills(p, b))
            return CHOOSING_ACTION

        # –í–∏–∫–æ–Ω—É—î–º–æ —É–º—ñ–Ω–Ω—è (apply_skill —Å–∞–º –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ö–î)
        effect_text = apply_skill(p, e, skill_name, b)

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
        context.user_data["player"] = p.asdict()
        context.user_data["enemy"] = e.asdict()
        context.user_data["battle_state"] = b

        text = header + f"\n{effect_text}"

        # –Ø–∫—â–æ –≤–æ—Ä–æ–≥ –≤–ø–∞–≤ –≤—ñ–¥ –µ—Ñ–µ–∫—Ç—É –æ–¥—Ä–∞–∑—É
        if e.hp <= 0:
            loot = generate_loot(context.user_data.get("location", ""))
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üéí –ó–∞–±—Ä–∞—Ç–∏ –ª—É—Ç", callback_data="battle:take_loot")],
                [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data="battle:after_loot")],
            ])
            context.user_data["loot_pending"] = loot
            if q:
                await q.edit_message_text(text + "\n\nüíÄ –í–æ—Ä–æ–≥ –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!", parse_mode=ParseMode.HTML, reply_markup=kb)
            else:
                await update.message.reply_html(text + "\n\nüíÄ –í–æ—Ä–æ–≥ –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!", reply_markup=kb)
            return LOOTING

        # –•—ñ–¥ –≤–æ—Ä–æ–≥–∞
        return await _enemy_turn_after_player_action(update, context, prefix_text=text)

    # ---- –õ—É—Ç / –ü—ñ—Å–ª—è –±–æ—é ----
    if data == "battle:take_loot":
        loot = context.user_data.pop("loot_pending", [])
        # –ö–ª–∞–¥–µ–º–æ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –≥—Ä–∞–≤—Ü—è
        inv = list(getattr(p, "inventory", []) or [])
        inv.extend(loot)
        p.inventory = inv
        context.user_data["player"] = p.asdict()
        msg = "üéí –í–∏ –∑–∞–±—Ä–∞–ª–∏ –ª—É—Ç:\n" + "\n".join([f"‚Ä¢ {it.get('name','?')}" for it in loot]) if loot else "üéí –õ—É—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π."
        if q:
            await q.edit_message_text(msg + "\n\n‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ /explore", parse_mode=ParseMode.HTML)
        else:
            await update.message.reply_html(msg + "\n\n‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ /explore")
        return ConversationHandler.END

    if data == "battle:after_loot":
        if q:
            await q.edit_message_text("‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–∏–≥–æ–¥—É! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /explore.", parse_mode=ParseMode.HTML)
        else:
            await update.message.reply_text("‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–∏–≥–æ–¥—É! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /explore.")
        return ConversationHandler.END

    # –§–æ–ª–±–µ–∫
    if q:
        await q.edit_message_text(header + "\n–ù–µ–≤—ñ–¥–æ–º–∞ –±–æ–π–æ–≤–∞ –¥—ñ—è.", parse_mode=ParseMode.HTML, reply_markup=_kb_main(b))
    else:
        await update.message.reply_html(header + "\n–ù–µ–≤—ñ–¥–æ–º–∞ –±–æ–π–æ–≤–∞ –¥—ñ—è.", reply_markup=_kb_main(b))
    return CHOOSING_ACTION


# ----- –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ª–æ–≥—ñ–∫–∞ —Ö–æ–¥—É –≤–æ—Ä–æ–≥–∞ -----

async def _enemy_turn_after_player_action(update: Update, context: ContextTypes.DEFAULT_TYPE, prefix_text: str = "") -> int:
    """–û–±—Ä–æ–±–ª—è—î –ø–æ–≤–Ω–∏–π —Ö—ñ–¥ –≤–æ—Ä–æ–≥–∞ –ø—ñ—Å–ª—è –¥—ñ—ó –≥—Ä–∞–≤—Ü—è (–µ—Ñ–µ–∫—Ç–∏, –æ–≥–ª—É—à–µ–Ω–Ω—è, –∞—Ç–∞–∫–∞, —Ç—ñ–∫ –ö–î)."""
    q = update.callback_query
    p = dict_to_player(context.user_data.get("player"))
    e = dict_to_enemy(context.user_data.get("enemy"))
    b = context.user_data.setdefault("battle_state", {})

    # –•–µ–¥–µ—Ä
    header = _render_battle_header(p, e)
    info_lines: List[str] = []
    if prefix_text:
        info_lines.append(prefix_text)

    # 1) –°—Ç–∞—Ä—Ç —Ö–æ–¥—É –≤–æ—Ä–æ–≥–∞: –¥–æ—Ç-–µ—Ñ–µ–∫—Ç–∏ (–∫—Ä–æ–≤–æ—Ç–µ—á–∞ —Ç–æ—â–æ)
    start_txt = apply_start_of_enemy_turn_effects(e, b)
    if start_txt:
        info_lines.append(start_txt)
    context.user_data["enemy"] = e.asdict()

    # –Ø–∫—â–æ –≤–æ—Ä–æ–≥ –ø–æ–º–µ—Ä –≤—ñ–¥ –µ—Ñ–µ–∫—Ç—ñ–≤ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ
    if e.hp <= 0:
        loot = generate_loot(context.user_data.get("location", ""))
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üéí –ó–∞–±—Ä–∞—Ç–∏ –ª—É—Ç", callback_data="battle:take_loot")],
            [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data="battle:after_loot")],
        ])
        context.user_data["loot_pending"] = loot
        text = header + "\n".join(info_lines) + "\n\nüíÄ –í–æ—Ä–æ–≥ –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!"
        if q:
            await q.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=kb)
        else:
            await update.message.reply_html(text, reply_markup=kb)
        return LOOTING

    # 2) –ß–∏ –æ–≥–ª—É—à–µ–Ω–∏–π –≤–æ—Ä–æ–≥
    if enemy_is_stunned(b):
        # –ù–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ —Ä–∞—É–Ω–¥—É: —Ç—ñ–∫ –∫—É–ª–¥–∞—É–Ω—ñ–≤
        turn_tick_cooldowns(b)
        context.user_data["battle_state"] = b
        text = header + "\n".join(info_lines) + "\n\nüòµ –í–æ—Ä–æ–≥ –æ–≥–ª—É—à–µ–Ω–∏–π —ñ –ø—Ä–æ–ø—É—Å–∫–∞—î —Ö—ñ–¥!"
        if q:
            await q.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=_kb_main(b))
        else:
            await update.message.reply_html(text, reply_markup=_kb_main(b))
        return CHOOSING_ACTION

    # 3) –ê—Ç–∞–∫–∞ –≤–æ—Ä–æ–≥–∞
    # –í–ø–ª–∏–≤ –æ–¥–Ω–æ—Ö–æ–¥–æ–≤–æ–≥–æ –¥–µ—Ñ-–±–∞—Ñ—É –≥—Ä–∞–≤—Ü—è –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤ roll_damage —á–µ—Ä–µ–∑ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä defense
    def_up = b.get("p_status", {}).get("def_up_val", 0) if b.get("p_status", {}).get("def_up") else 0
    dmg = max(1, roll_damage(e.atk, p.defense + def_up))
    p.hp -= dmg
    context.user_data["player"] = p.asdict()

    info_lines.append(f"üó°Ô∏è –í–æ—Ä–æ–≥ –∞—Ç–∞–∫—É—î –≤–∞—Å —Ç–∞ –∑–∞–≤–¥–∞—î {dmg} —à–∫–æ–¥–∏.")

    # 4) –ö—ñ–Ω–µ—Ü—å —Ö–æ–¥—É –≤–æ—Ä–æ–≥–∞: —Å–∫–∏–Ω—É—Ç–∏ –æ–¥–Ω–æ—Ö–æ–¥–æ–≤–∏–π –¥–µ—Ñ-–±–∞—Ñ
    clear_player_def_buff_after_enemy_turn(b)

    # 5) –ù–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ —Ä–∞—É–Ω–¥—É: —Ç—ñ–∫ –ö–î —É–º—ñ–Ω—å
    turn_tick_cooldowns(b)
    context.user_data["battle_state"] = b

    # –Ø–∫—â–æ –≥—Ä–∞–≤–µ—Ü—å –∑–∞–≥–∏–Ω—É–≤
    if p.hp <= 0:
        text = header + "\n".join(info_lines) + "\n\nüíÄ –í–∏ –≤–ø–∞–ª–∏ –≤ –±–æ—é‚Ä¶"
        if q:
            await q.edit_message_text(text, parse_mode=ParseMode.HTML)
        else:
            await update.message.reply_html(text)
        return ConversationHandler.END

    # –Ü–Ω–∞–∫—à–µ ‚Äî –∑–Ω–æ–≤—É —Ö—ñ–¥ –≥—Ä–∞–≤—Ü—è
    text = header + "\n".join(info_lines) + "\n\n–í–∞—à —Ö—ñ–¥ ‚Äî –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é."
    if q:
        await q.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=_kb_main(b))
    else:
        await update.message.reply_html(text, reply_markup=_kb_main(b))
    return CHOOSING_ACTION


# ----- –ü–æ—Å—Ç-–±–∏—Ç–≤–∞ (–∑–∞–ª–∏—à–µ–Ω–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ, —è–∫—â–æ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ —ñ–Ω—à–∏—Ö –º—ñ—Å—Ü—å) -----

async def after_loot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text("‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–∏–≥–æ–¥—É! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /explore.")
    else:
        await update.message.reply_text("‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–∏–≥–æ–¥—É! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /explore.")
    return ConversationHandler.END
