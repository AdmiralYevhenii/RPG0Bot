# -*- coding: utf-8 -*-
from __future__ import annotations

import random
from typing import Tuple

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler

from ..models import dict_to_player, dict_to_enemy
from ..utils.loot import generate_loot
from ..utils.skills import (
    apply_skill,
    turn_tick_cooldowns,
    apply_start_of_enemy_turn_effects,
    enemy_is_stunned,
    consume_player_temp_buffs,
    clear_player_def_buff_after_enemy_turn,
)

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
CHOOSING_ACTION, ENEMY_TURN, LOOTING = range(3)

# ----- –ö—É–±–∏–∫–∏ -----

def roll_damage(atk: int, defense: int) -> int:
    """–ë–∞–∑–æ–≤–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —à–∫–æ–¥–∏: (atk - def) –∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é –≤–∞—Ä—ñ–∞—Ü—ñ—î—é, –º—ñ–Ω—ñ–º—É–º 1."""
    base = max(0, atk - defense)
    variance = random.randint(-2, 2)
    return max(1, base + variance)

def roll_player_attack(atk: int, defense: int) -> Tuple[int, bool]:
    """–ê—Ç–∞–∫–∞ –≥—Ä–∞–≤—Ü—è –∑ 15% –∫—Ä–∏—Ç–æ–º (√ó2)."""
    crit = random.random() < 0.15
    dmg = roll_damage(atk, defense)
    if crit:
        dmg *= 2
    return dmg, crit


# ----- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ä–µ–Ω–¥–µ—Ä–∏ —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ -----

def _render_battle_header(p, e) -> str:
    return (
        f"‚öîÔ∏è <b>–ë–Ü–ô</b>\n"
        f"üë§ –í–∏: {p.name} ‚Äî HP {p.hp}/{p.max_hp} | ATK {p.atk} DEF {p.defense}\n"
        f"üëπ –í–æ—Ä–æ–≥: {e.name} ‚Äî HP {e.hp}/{e.max_hp} | ATK {e.atk} DEF {e.defense}\n"
    )

def _skill_cd_label(bstate: dict, name: str) -> str:
    cd = bstate.setdefault("cooldowns", {}).get(name, 0) or 0
    return f"‚ú® {name} (–ö–î {int(cd)})" if cd > 0 else f"‚ú® {name}"

def battle_keyboard(p=None, in_battle: bool = True, battle_state: dict | None = None) -> InlineKeyboardMarkup:
    """
    –ì–æ–ª–æ–≤–Ω–∞ –±–æ–π–æ–≤–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞. –ü–æ–∫–∞–∑—É—î –¥–æ 3—Ö —É–º—ñ–Ω—å –∑ –ª–æ–∞–¥–∞—É—Ç—É –≥—Ä–∞–≤—Ü—è –∑ –ö–î.
    """
    rows = [
        [InlineKeyboardButton("üó°Ô∏è –ê—Ç–∞–∫–∞", callback_data="battle:attack")],
        [InlineKeyboardButton("üõ°Ô∏è –ó–∞—Ö–∏—Å—Ç", callback_data="battle:defend")],
        [InlineKeyboardButton("üß™ –ó—ñ–ª–ª—è", callback_data="battle:potion")],
        [InlineKeyboardButton("üèÉ –í—Ç–µ–∫—Ç–∏", callback_data="battle:run")],
    ]

    if p is not None:
        load = list(getattr(p, "skills_loadout", []) or [])[:3]
        if load:
            skill_buttons = []
            for name in load:
                label = _skill_cd_label(battle_state or {}, name)
                skill_buttons.append([InlineKeyboardButton(label, callback_data=f"battle:skill:{name}")])
            # –í—Å—Ç–∞–≤–∏–º–æ –±–ª–æ–∫ —É–º—ñ–Ω—å –Ω–∞ –¥—Ä—É–≥–µ –º—ñ—Å—Ü–µ, —â–æ–± –±—É–ª–∏ –æ–¥—Ä–∞–∑—É –ø—ñ–¥ –∞—Ç–∞–∫–æ—é
            rows = [rows[0]] + skill_buttons + rows[1:]

    return InlineKeyboardMarkup(rows)


# ----- –ì–æ–ª–æ–≤–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥—ñ–π –≥—Ä–∞–≤—Ü—è -----

async def on_battle_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–æ–±–ª—è—î –≤—Å—ñ callback'–∏ 'battle:*' —É —Ö—ñ–¥ –≥—Ä–∞–≤—Ü—è.
    –ü–Ü–°–õ–Ø –ö–û–ñ–ù–û–á –î–Ü–á –ì–†–ê–í–¶–Ø –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ enemy_turn(update, context),
    –¥–µ –í –ö–Ü–ù–¶–Ü –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –Ñ–î–ò–ù–ò–ô —Ç—ñ–∫ –∫—É–ª–¥–∞—É–Ω—ñ–≤.
    """
    q = update.callback_query
    data = q.data if q else None
    if q:
        await q.answer()

    p = dict_to_player(context.user_data.get("player"))
    e = dict_to_enemy(context.user_data.get("enemy"))
    b = context.user_data.setdefault("battle_state", {})

    header = _render_battle_header(p, e)

    if not data or not data.startswith("battle:"):
        # –ù–µ–≤—ñ–¥–æ–º–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–∏–º–æ –æ—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é
        kb = battle_keyboard(p, True, b)
        if q:
            await q.edit_message_text(header + "\n–í–∞—à —Ö—ñ–¥ ‚Äî –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é.", parse_mode=ParseMode.HTML, reply_markup=kb)
        else:
            await update.message.reply_html(header + "\n–í–∞—à —Ö—ñ–¥ ‚Äî –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é.", reply_markup=kb)
        return CHOOSING_ACTION

    _, action, *rest = data.split(":", 2)

    # ---- –ê—Ç–∞–∫–∞ ----
    if action == "attack":
        atk_b, _def_b = consume_player_temp_buffs(p, b)
        dmg, crit = roll_player_attack(p.atk + atk_b, e.defense)
        e.hp -= dmg
        context.user_data["player"] = p.asdict()
        context.user_data["enemy"] = e.asdict()

        text = header + f"\nüó°Ô∏è –í–∏ –∞—Ç–∞–∫—É—î—Ç–µ –≤–æ—Ä–æ–≥–∞ —Ç–∞ –∑–∞–≤–¥–∞—î—Ç–µ {dmg} —à–∫–æ–¥–∏{' (–ö–†–ò–¢!)' if crit else ''}."

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–º–µ—Ä—Ç—ñ –≤–æ—Ä–æ–≥–∞ –≤—ñ–¥ —É–¥–∞—Ä—É –≥—Ä–∞–≤—Ü—è
        if e.hp <= 0:
            return await _on_enemy_defeated(update, context, text)

        # –ü–ï–†–ï–•–Ü–î –ù–ê –•–Ü–î –í–û–†–û–ì–ê (–±–µ–∑ —Ç—ñ–∫—É –ö–î —Ç—É—Ç)
        context.user_data["last_log"] = text
        return await enemy_turn(update, context)

    # ---- –ó–∞—Ö–∏—Å—Ç ----
    if action == "defend":
        pst = b.setdefault("p_status", {})
        pst["def_up"] = 1
        pst["def_up_val"] = max(2, int(p.level / 2) + 1)
        context.user_data["battle_state"] = b

        text = header + f"\nüõ°Ô∏è –í–∏ –∑–∞–π–º–∞—î—Ç–µ –æ–±–æ—Ä–æ–Ω–Ω—É —Å—Ç—ñ–π–∫—É: +{pst['def_up_val']} –¥–æ –∑–∞—Ö–∏—Å—Ç—É –Ω–∞ —Ü–µ–π —Ä–∞—É–Ω–¥."
        context.user_data["last_log"] = text
        return await enemy_turn(update, context)

    # ---- –ó—ñ–ª–ª—è ----
    if action == "potion":
        healed = min(p.max_hp - p.hp, 8)
        p.hp += healed
        context.user_data["player"] = p.asdict()

        text = header + f"\nüß™ –í–∏ –≤–∏–ø–∏–≤–∞—î—Ç–µ –∑—ñ–ª–ª—è —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª—é—î—Ç–µ {healed} HP."
        context.user_data["last_log"] = text
        return await enemy_turn(update, context)

    # ---- –í—Ç–µ—á–∞ ----
    if action == "run":
        if random.random() < 0.5:
            msg = header + "\nüèÉ –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—Ç–µ–∫–ª–∏ –∑ –±–æ—é."
            if q:
                await q.edit_message_text(msg, parse_mode=ParseMode.HTML)
            else:
                await update.message.reply_html(msg)
            return ConversationHandler.END
        else:
            text = header + "\nüèÉ –°–ø—Ä–æ–±–∞ –≤—Ç–µ—á—ñ –Ω–µ–≤–¥–∞–ª–∞!"
            context.user_data["last_log"] = text
            return await enemy_turn(update, context)

    # ---- –£–º—ñ–Ω–Ω—è ----
    if action == "skill":
        skill_name = (rest[0] if rest else "").strip()
        if not skill_name:
            # –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –∫–Ω–æ–ø–∫—É –±–µ–∑ –Ω–∞–∑–≤–∏ (–Ω–µ –ø–æ–≤–∏–Ω–Ω–æ —Å—Ç–∞—Ç–∏—Å—å) ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é
            kb = battle_keyboard(p, True, b)
            if q:
                await q.edit_message_text(header + "\n–í–∞—à —Ö—ñ–¥ ‚Äî –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é.", parse_mode=ParseMode.HTML, reply_markup=kb)
            else:
                await update.message.reply_html(header + "\n–í–∞—à —Ö—ñ–¥ ‚Äî –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é.", reply_markup=kb)
            return CHOOSING_ACTION

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ –≤ –ª–æ–∞–¥–∞—É—Ç—ñ
        load = list(getattr(p, "skills_loadout", []) or [])
        if skill_name not in load:
            txt = header + "\n–¶–µ —É–º—ñ–Ω–Ω—è –Ω–µ –≤—Ö–æ–¥–∏—Ç—å –¥–æ –≤–∞—à–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–±–æ—Ä—É."
            kb = battle_keyboard(p, True, b)
            if q:
                await q.edit_message_text(txt, parse_mode=ParseMode.HTML, reply_markup=kb)
            else:
                await update.message.reply_html(txt, reply_markup=kb)
            return CHOOSING_ACTION

        # –í–∏–∫–æ–Ω—É—î–º–æ —É–º—ñ–Ω–Ω—è (—Å—Ç–∞–≤–∏—Ç—å –ö–î –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ)
        effect_text = apply_skill(p, e, skill_name, b)
        context.user_data["player"] = p.asdict()
        context.user_data["enemy"] = e.asdict()
        context.user_data["battle_state"] = b

        text = header + f"\n{effect_text}"

        # –Ø–∫—â–æ –≤–æ—Ä–æ–≥ –ø–æ–º–µ—Ä –æ–¥—Ä–∞–∑—É
        if e.hp <= 0:
            return await _on_enemy_defeated(update, context, text)

        # –ü–ï–†–ï–•–Ü–î –ù–ê –•–Ü–î –í–û–†–û–ì–ê (–±–µ–∑ —Ç—ñ–∫—É –ö–î —Ç—É—Ç)
        context.user_data["last_log"] = text
        return await enemy_turn(update, context)

    # –§–æ–ª–±–µ–∫
    kb = battle_keyboard(p, True, b)
    if q:
        await q.edit_message_text(header + "\n–ù–µ–≤—ñ–¥–æ–º–∞ –±–æ–π–æ–≤–∞ –¥—ñ—è.", parse_mode=ParseMode.HTML, reply_markup=kb)
    else:
        await update.message.reply_html(header + "\n–ù–µ–≤—ñ–¥–æ–º–∞ –±–æ–π–æ–≤–∞ –¥—ñ—è.", reply_markup=kb)
    return CHOOSING_ACTION


# ----- –•—ñ–¥ –≤–æ—Ä–æ–≥–∞ -----

async def enemy_turn(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–≤–Ω–∏–π —Ö—ñ–¥ –≤–æ—Ä–æ–≥–∞:
    1) —Å—Ç–∞—Ä—Ç-–µ—Ñ–µ–∫—Ç–∏ (–∫—Ä–æ–≤–æ—Ç–µ—á–∞ —Ç–æ—â–æ)
    2) –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–≥–ª—É—à–µ–Ω–Ω—è
    3) –∞—Ç–∞–∫–∞ –≤–æ—Ä–æ–≥–∞
    4) —Å–∫–∏–¥–∞–Ω–Ω—è –æ–¥–Ω–æ—Ö–æ–¥–æ–≤–æ–≥–æ DEF-–±–∞—Ñ—É
    5) –Ñ–î–ò–ù–ò–ô —Ç—ñ–∫ –∫—É–ª–¥–∞—É–Ω—ñ–≤ –Ω–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ
    """
    q = update.callback_query
    if q:
        await q.answer()

    p = dict_to_player(context.user_data.get("player"))
    e = dict_to_enemy(context.user_data.get("enemy"))
    b = context.user_data.setdefault("battle_state", {})

    header = _render_battle_header(p, e)
    info = []

    # –î–æ–¥–∞–º–æ –ª–æ–≥ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–¥—ñ—è –≥—Ä–∞–≤—Ü—è), —è–∫—â–æ —î
    prev = context.user_data.pop("last_log", "")
    if prev:
        # –ü—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Å–µ–¥–∂–∞ prev –≤–∂–µ –º—ñ—Å—Ç–∏—Ç—å header, —Ç–æ–º—É –≤–∏–≤–µ–¥–µ–º–æ —Ç—ñ–ª—å–∫–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ header
        # –∞–ª–µ –ø—Ä–æ—Å—Ç—ñ—à–µ (—ñ —á–∏—Å—Ç—ñ—à–µ) –≤–∏–≤–æ–¥–∏—Ç–∏ —Å–≤—ñ–∂–∏–π header —Ç–∞ –∫–æ—Ä–æ—Ç–∫—É —Å—É—Ç—å
        # –¢–æ–∂ –ª–∏—à–∞—î–º–æ info —Ç—ñ–ª—å–∫–∏ –∑ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ä—è–¥–∫–∞–º–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ö–æ–¥—É –≤–æ—Ä–æ–≥–∞
        pass

    # (1) —Å—Ç–∞—Ä—Ç–æ–≤i –µ—Ñ–µ–∫—Ç–∏ –≤–æ—Ä–æ–≥–∞
    start_txt = apply_start_of_enemy_turn_effects(e, b)
    if start_txt:
        info.append(start_txt)
    context.user_data["enemy"] = e.asdict()

    if e.hp <= 0:
        text = header + ("\n".join(info) + "\n\nüíÄ –í–æ—Ä–æ–≥ –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!" if info else "\n\nüíÄ –í–æ—Ä–æ–≥ –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!")
        return await _on_enemy_defeated(update, context, text, already_formatted=True)

    # (2) –æ–≥–ª—É—à–µ–Ω–Ω—è
    if enemy_is_stunned(b):
        # –ö—ñ–Ω–µ—Ü—å —Ä–∞—É–Ω–¥—É ‚Äî –¢–Ü–õ–¨–ö–ò –¢–£–¢ —Ç—ñ–∫ –∫—É–ª–¥–∞—É–Ω—ñ–≤
        turn_tick_cooldowns(b)
        context.user_data["battle_state"] = b
        text = header + ("\n".join(info) + "\n\nüòµ –í–æ—Ä–æ–≥ –æ–≥–ª—É—à–µ–Ω–∏–π —ñ –ø—Ä–æ–ø—É—Å–∫–∞—î —Ö—ñ–¥!" if info else "\nüòµ –í–æ—Ä–æ–≥ –æ–≥–ª—É—à–µ–Ω–∏–π —ñ –ø—Ä–æ–ø—É—Å–∫–∞—î —Ö—ñ–¥!")
        kb = battle_keyboard(p, True, b)
        if q:
            await q.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=kb)
        else:
            await update.message.reply_html(text, reply_markup=kb)
        return CHOOSING_ACTION

    # (3) –∞—Ç–∞–∫–∞ –≤–æ—Ä–æ–≥–∞ (–≤—Ä–∞—Ö–æ–≤—É—î–º–æ –æ–¥–Ω–æ—Ö–æ–¥–æ–≤–∏–π DEF-–±–∞—Ñ)
    def_up = b.get("p_status", {}).get("def_up_val", 0) if b.get("p_status", {}).get("def_up") else 0
    dmg = max(1, roll_damage(e.atk, p.defense + def_up))
    p.hp -= dmg
    context.user_data["player"] = p.asdict()
    info.append(f"üó°Ô∏è –í–æ—Ä–æ–≥ –∞—Ç–∞–∫—É—î –≤–∞—Å —Ç–∞ –∑–∞–≤–¥–∞—î {dmg} —à–∫–æ–¥–∏.")

    # (4) –∫—ñ–Ω–µ—Ü—å —Ö–æ–¥—É –≤–æ—Ä–æ–≥–∞ ‚Äî —Å–∫–∏–Ω–µ–º–æ –æ–¥–Ω–æ—Ö–æ–¥–æ–≤–∏–π DEF-–±–∞—Ñ
    clear_player_def_buff_after_enemy_turn(b)

    # (5) –Ñ–î–ò–ù–ò–ô —Ç—ñ–∫ –∫—É–ª–¥–∞—É–Ω—ñ–≤
    turn_tick_cooldowns(b)
    context.user_data["battle_state"] = b

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–º–µ—Ä—Ç—ñ –≥—Ä–∞–≤—Ü—è
    if p.hp <= 0:
        text = header + ("\n".join(info) + "\n\nüíÄ –í–∏ –≤–ø–∞–ª–∏ –≤ –±–æ—é‚Ä¶" if info else "\n\nüíÄ –í–∏ –≤–ø–∞–ª–∏ –≤ –±–æ—é‚Ä¶")
        if q:
            await q.edit_message_text(text, parse_mode=ParseMode.HTML)
        else:
            await update.message.reply_html(text)
        return ConversationHandler.END

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ö—ñ–¥ –≥—Ä–∞–≤—Ü–µ–≤—ñ
    text = header + ("\n".join(info) + "\n\n–í–∞—à —Ö—ñ–¥ ‚Äî –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é." if info else "\n–í–∞—à —Ö—ñ–¥ ‚Äî –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é.")
    kb = battle_keyboard(p, True, b)
    if q:
        await q.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=kb)
    else:
        await update.message.reply_html(text, reply_markup=kb)
    return CHOOSING_ACTION


# ----- –ü–µ—Ä–µ–º–æ–≥–∞ / –õ—É—Ç -----

async def _on_enemy_defeated(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, already_formatted: bool = False) -> int:
    """–ï–∫—Ä–∞–Ω –ø–µ—Ä–µ–º–æ–≥–∏ + –ª—É—Ç."""
    q = update.callback_query

    loot = generate_loot(context.user_data.get("location", ""))
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üéí –ó–∞–±—Ä–∞—Ç–∏ –ª—É—Ç", callback_data="battle:take_loot")],
        [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data="battle:after_loot")],
    ])
    context.user_data["loot_pending"] = loot

    if q:
        await q.edit_message_text(text if already_formatted else (text + "\n\nüíÄ –í–æ—Ä–æ–≥ –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!"),
                                  parse_mode=ParseMode.HTML, reply_markup=kb)
    else:
        await update.message.reply_html(text if already_formatted else (text + "\n\nüíÄ –í–æ—Ä–æ–≥ –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!"),
                                        reply_markup=kb)
    return LOOTING


# –ü—ñ—Å–ª—è –ª—É—Ç–∞ / –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±–æ—é

async def after_loot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    if q:
        await q.answer()
        await q.edit_message_text("‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–∏–≥–æ–¥—É! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /explore.")
    else:
        await update.message.reply_text("‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–∏–≥–æ–¥—É! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /explore.")
    return ConversationHandler.END
