# -*- coding: utf-8 -*-
"""
/shop ‚Äî –∫—É–ø—ñ–≤–ª—è —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è, –ø—Ä–æ–¥–∞–∂ –ª—É—Ç—É, —Ä–µ–º–æ–Ω—Ç (—á–µ—Ä–µ–∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, –∞–ª–µ –ø—Ä–æ–¥—É–±–ª—é—î–º–æ).
"""
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from ..models import ensure_player_ud
from ..utils.loot import price_of_item, sell_value, compute_price


def shop_stock():
    return [
        {"name":"–ö–∏–Ω–¥–∂–∞–ª —Ä–µ–º—ñ—Å–Ω–∏–∫–∞","rarity":"common","title":"‚ö™ –ó–≤–∏—á–∞–π–Ω–∏–π","emoji":"‚ö™","type":"weapon","atk":1,"defense":0,"price":15,"equipped":False,"durability":20},
        {"name":"–®–∫—ñ—Ä—è–Ω–∏–π –Ω–∞–≥—Ä—É–¥–Ω–∏–∫","rarity":"common","title":"‚ö™ –ó–≤–∏—á–∞–π–Ω–∏–π","emoji":"‚ö™","type":"armor","atk":0,"defense":1,"price":15,"equipped":False,"durability":20},
        {"name":"–°—Ä—ñ–±–Ω–∏–π –ø–µ—Ä—Å—Ç–µ–Ω—å","rarity":"uncommon","title":"üü¢ –ù–µ–∑–≤–∏—á–∞–π–Ω–∏–π","emoji":"üü¢","type":"accessory","atk":1,"defense":1,"price":35,"equipped":False,"durability":20},
        {"name":"–ú–µ—á –ª—ñ—Å–Ω–∏–∫–∞","rarity":"uncommon","title":"üü¢ –ù–µ–∑–≤–∏—á–∞–π–Ω–∏–π","emoji":"üü¢","type":"weapon","atk":2,"defense":0,"price":38,"equipped":False,"durability":20},
        {"name":"–õ–∞—Ç–∏ —Å—Ç—Ä–∞–∂–∞","rarity":"rare","title":"üîµ –†—ñ–¥–∫—ñ—Å–Ω–∏–π","emoji":"üîµ","type":"armor","atk":0,"defense":3,"price":70,"equipped":False,"durability":20},
    ]

def kb_shop_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç–∏", callback_data="shop:menu:buy")],
        [InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞—Ç–∏", callback_data="shop:menu:sell")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ó–∞–∫—Ä–∏—Ç–∏", callback_data="shop:close")],
    ])

def render_shop_buy() -> tuple[str, InlineKeyboardMarkup]:
    goods = shop_stock()
    lines = []
    for i,g in enumerate(goods):
        lines.append(f"{i+1}. {g['emoji']} <b>{g['name']}</b> ‚Äî {g['title']} [{g['type']}] (+ATK {g.get('atk',0)}, +DEF {g.get('defense',0)}) ‚Äî {g['price']}–∑")
    kb = [[InlineKeyboardButton(f"–ö—É–ø–∏—Ç–∏ {i+1}", callback_data=f"shop:buygear:{i}")] for i in range(len(goods))]
    kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="shop:menu:main")])
    return "üõí –¢–æ–≤–∞—Ä–∏:\n" + "\n".join(lines), InlineKeyboardMarkup(kb)

def render_shop_sell(p) -> tuple[str, InlineKeyboardMarkup]:
    if not p.inventory:
        return "–ù—ñ—á–æ–≥–æ –ø—Ä–æ–¥–∞–≤–∞—Ç–∏.", InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="shop:menu:main")]])
    lines, kb = [], []
    for i, it in enumerate(p.inventory):
        lines.append(f"{i+1}. {it['emoji']} <b>{it['name']}</b> ‚Äî {it['title']} [{it['type']}] (+ATK {it.get('atk',0)}, +DEF {it.get('defense',0)}) ‚Äî –ø—Ä–æ–¥–∞–∂: {sell_value(it)}–∑")
        kb.append([InlineKeyboardButton(f"–ü—Ä–æ–¥–∞—Ç–∏ {i+1}", callback_data=f"shop:sell:{i}")])
    kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="shop:menu:main")])
    return "üí∞ –ü—Ä–æ–¥–∞–∂ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é:\n" + "\n".join(lines), InlineKeyboardMarkup(kb)

async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    p = ensure_player_ud(context.user_data)
    await update.message.reply_html(f"üè™ –ö—Ä–∞–º–Ω–∏—Ü—è. –£ –≤–∞—Å <b>{p.gold}</b> –∑–æ–ª–æ—Ç–∞.", reply_markup=kb_shop_main())

async def on_shop_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    p = ensure_player_ud(context.user_data)
    data = q.data.split(":", 2)
    action = ":".join(data[1:]) if len(data) > 1 else ""

    if action == "menu:main":
        await q.edit_message_text(f"üè™ –ö—Ä–∞–º–Ω–∏—Ü—è. –£ –≤–∞—Å <b>{p.gold}</b> –∑–æ–ª–æ—Ç–∞.", parse_mode=ParseMode.HTML, reply_markup=kb_shop_main())
        return
    if action == "menu:buy":
        text, kb = render_shop_buy()
        await q.edit_message_text(text + f"\n\n–í–∞—à–µ –∑–æ–ª–æ—Ç–æ: <b>{p.gold}</b>", parse_mode=ParseMode.HTML, reply_markup=kb)
        return
    if action == "menu:sell":
        text, kb = render_shop_sell(p)
        await q.edit_message_text(text + f"\n\n–í–∞—à–µ –∑–æ–ª–æ—Ç–æ: <b>{p.gold}</b>", parse_mode=ParseMode.HTML, reply_markup=kb)
        return
    if action == "close":
        await q.edit_message_text("–ö—Ä–∞–º–Ω–∏—Ü—é –∑–∞–∫—Ä–∏—Ç–æ.")
        return

    if action.startswith("buygear:"):
        idx = int(action.split(":",1)[1])
        goods = shop_stock()
        if idx < 0 or idx >= len(goods):
            await q.edit_message_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–≤–∞—Ä.", reply_markup=kb_shop_main()); return
        item = goods[idx].copy()
        price = item["price"]
        if p.gold < price:
            await q.edit_message_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–æ–ª–æ—Ç–∞.", reply_markup=kb_shop_main()); return
        p.gold -= price
        p.inventory.append(item)
        context.user_data["player"] = p.asdict()
        text, kb = render_shop_buy()
        await q.edit_message_text(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: {item['emoji']} <b>{item['name']}</b> –∑–∞ {price}–∑.\n\n" + text + f"\n\n–í–∞—à–µ –∑–æ–ª–æ—Ç–æ: <b>{p.gold}</b>", parse_mode=ParseMode.HTML, reply_markup=kb)
        return

    if action.startswith("sell:"):
        idx = int(action.split(":",1)[1])
        if idx < 0 or idx >= len(p.inventory):
            await q.edit_message_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å.", reply_markup=kb_shop_main()); return
        it = p.inventory[idx]
        if it.get("equipped"):
            await q.edit_message_text("–ó–Ω—ñ–º—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∂–µ–º.", reply_markup=kb_shop_main()); return
        gain = sell_value(it)
        p.gold += gain
        p.inventory.pop(idx)
        context.user_data["player"] = p.asdict()
        text, kb = render_shop_sell(p)
        await q.edit_message_text(f"üí∞ –ü—Ä–æ–¥–∞–Ω–æ: {it['emoji']} <b>{it['name']}</b> –∑–∞ {gain}–∑.\n\n" + text + f"\n\n–í–∞—à–µ –∑–æ–ª–æ—Ç–æ: <b>{p.gold}</b>", parse_mode=ParseMode.HTML, reply_markup=kb)
        return

    await q.edit_message_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –º–∞–≥–∞–∑–∏–Ω—É.", reply_markup=kb_shop_main())
