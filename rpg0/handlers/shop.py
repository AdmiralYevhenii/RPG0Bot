# -*- coding: utf-8 -*-
from __future__ import annotations
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from ..models import ensure_player_ud
from ..utils.loot import price_of_item, sell_value
from ..utils.equipment import equip_item, unequip_slot
from ..config import LOC_SHOP, LOC_CITY

def _kb(rows): 
    return InlineKeyboardMarkup(rows)

def kb_shop_main() -> InlineKeyboardMarkup:
    return _kb([
        [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç–∏ —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è", callback_data="shop:menu:buy")],
        [InlineKeyboardButton("üß™ –ö—É–ø–∏—Ç–∏ –∑—ñ–ª–ª—è (+1 –∑–∞ 10–∑)", callback_data="shop:buy_potion")],
        [InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞—Ç–∏ –∑ —Ä—é–∫–∑–∞–∫–∞", callback_data="shop:menu:sell")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–∏–π—Ç–∏ –¥–æ –ú—ñ—Å—Ç–∞", callback_data="shop:leave")],
    ])

def shop_stock() -> list[dict]:
    # –°—Ç–∞—Ç–∏—á–Ω–∏–π –Ω–∞–±—ñ—Ä ‚Äî –º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä—é–≤–∞—Ç–∏
    return [
        {"name":"–ö–∏–Ω–¥–∂–∞–ª —Ä–µ–º—ñ—Å–Ω–∏–∫–∞","rarity":"common","title":"‚ö™ –ó–≤–∏—á–∞–π–Ω–∏–π","emoji":"‚ö™","type":"weapon","atk":1,"defense":0,"price":15,"equipped":False,"durability":20,"durability_max":20},
        {"name":"–®–∫—ñ—Ä—è–Ω–∏–π –Ω–∞–≥—Ä—É–¥–Ω–∏–∫","rarity":"common","title":"‚ö™ –ó–≤–∏—á–∞–π–Ω–∏–π","emoji":"‚ö™","type":"armor","atk":0,"defense":1,"price":15,"equipped":False,"durability":25,"durability_max":25},
        {"name":"–°—Ä—ñ–±–Ω–∏–π –ø–µ—Ä—Å—Ç–µ–Ω—å","rarity":"uncommon","title":"üü¢ –ù–µ–∑–≤–∏—á–∞–π–Ω–∏–π","emoji":"üü¢","type":"accessory","atk":1,"defense":1,"price":35,"equipped":False,"durability":30,"durability_max":30},
        {"name":"–ú–µ—á –ª—ñ—Å–Ω–∏–∫–∞","rarity":"uncommon","title":"üü¢ –ù–µ–∑–≤–∏—á–∞–π–Ω–∏–π","emoji":"üü¢","type":"weapon","atk":2,"defense":0,"price":38,"equipped":False,"durability":35,"durability_max":35},
        {"name":"–õ–∞—Ç–∏ —Å—Ç—Ä–∞–∂–∞","rarity":"rare","title":"üîµ –†—ñ–¥–∫—ñ—Å–Ω–∏–π","emoji":"üîµ","type":"armor","atk":0,"defense":3,"price":70,"equipped":False,"durability":50,"durability_max":50},
    ]

def format_item_line(it: dict, idx: int | None = None, with_price: bool = False, sell_mode: bool = False) -> str:
    t = f"{it['emoji']} <b>{it['name']}</b> ‚Äî {it['title']} [{it['type']}] (+ATK {it.get('atk',0)}, +DEF {it.get('defense',0)})"
    if "durability" in it and ("durability_max" in it or isinstance(it.get("durability"), int)):
        # –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ 'durability', –∞–±–æ 'durability/durability_max' –∫–æ–ª–∏ —î –æ–±–∏–¥–≤–∞
        if "durability_max" in it:
            t += f" | ‚öôÔ∏è{it['durability']}/{it['durability_max']}"
        else:
            t += f" | ‚öôÔ∏è{it['durability']}"
    if with_price and it.get("price"):
        t += f" ‚Äî —Ü—ñ–Ω–∞: {it['price']}–∑"
    if sell_mode:
        t += f" ‚Äî –ø—Ä–æ–¥–∞–∂: {sell_value(it)}–∑"
    if idx is not None:
        t = f"{idx}. " + t
    return t


def render_shop_buy() -> tuple[str, InlineKeyboardMarkup]:
    goods = shop_stock()
    lines = [format_item_line(g, idx=i+1, with_price=True) for i,g in enumerate(goods)]
    kb = [[InlineKeyboardButton(f"–ö—É–ø–∏—Ç–∏ {i+1}", callback_data=f"shop:buygear:{i}")] for i in range(len(goods))]
    kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="shop:menu:main")])
    return "üõí –¢–æ–≤–∞—Ä–∏:\n" + "\n".join(lines), InlineKeyboardMarkup(kb)

def render_shop_sell(p) -> tuple[str, InlineKeyboardMarkup]:
    if not p.inventory:
        return "–ù—ñ—á–æ–≥–æ –ø—Ä–æ–¥–∞–≤–∞—Ç–∏.", InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="shop:menu:main")]])
    lines, kb = [], []
    for i, it in enumerate(p.inventory):
        lines.append(format_item_line(it, idx=i+1, sell_mode=True))
        kb.append([InlineKeyboardButton(f"–ü—Ä–æ–¥–∞—Ç–∏ #{i+1} –∑–∞ {sell_value(it)}–∑", callback_data=f"shop:sell:{i}")])
    kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="shop:menu:main")])
    return "üí∞ –ü—Ä–æ–¥–∞–∂ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é:\n" + "\n".join(lines), InlineKeyboardMarkup(kb)

async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –¢–µ–ø–µ—Ä /shop ‚Äî —Ü–µ –õ–û–ö–ê–¶–Ü–Ø. 
    - –Ø–∫—â–æ –≤–∏ –í–ñ–ï —É ‚Äú–ö—Ä–∞–º–Ω–∏—Ü—è (–ú—ñ—Å—Ç–æ)‚Äù ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é.
    - –Ø–∫—â–æ –≤–∏ —É ‚Äú–ú—ñ—Å—Ç–æ‚Äù ‚Äî –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —à–≤–∏–¥–∫–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫—Ä–∞–º–Ω–∏—Ü—é (–±–µ–∑ /travel).
    - –í —ñ–Ω—à–∏—Ö –ª–æ–∫–∞—Ü—ñ—è—Ö ‚Äî –ø—ñ–¥–∫–∞–∑—É—î–º–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –ú—ñ—Å—Ç–æ -> –ö—Ä–∞–º–Ω–∏—Ü—è —á–µ—Ä–µ–∑ /travel.
    """
    p = ensure_player_ud(context.user_data)
    loc = context.user_data.get("location")
    if loc == LOC_SHOP:
        await update.message.reply_html(f"üè™ –ö—Ä–∞–º–Ω–∏—Ü—è. –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: <b>{p.gold}</b>.", reply_markup=kb_shop_main())
        return
    if loc == LOC_CITY:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üõí –£–≤—ñ–π—Ç–∏ –¥–æ –ö—Ä–∞–º–Ω–∏—Ü—ñ –∑–∞—Ä–∞–∑", callback_data="shop:enter")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏—Å—å —É –ú—ñ—Å—Ç—ñ", callback_data="shop:cancel")],
        ])
        await update.message.reply_html("–í–∏ –≤ –ú—ñ—Å—Ç—ñ. –ü–µ—Ä–µ–π—Ç–∏ –¥–æ <b>–ö—Ä–∞–º–Ω–∏—Ü—è (–ú—ñ—Å—Ç–æ)</b>?", reply_markup=kb)
        return
    await update.message.reply_html(
        f"üè™ –ö—Ä–∞–º–Ω–∏—Ü—è ‚Äî —Ü–µ –ª–æ–∫–∞—Ü—ñ—è –≤ –ú—ñ—Å—Ç—ñ.\n–°–ø–µ—Ä—à—É –ø–µ—Ä–µ–π–¥—ñ—Ç—å —É <b>{LOC_CITY}</b> ‚ûú <b>{LOC_SHOP}</b> —á–µ—Ä–µ–∑ /travel."
    )

async def on_shop_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    p = ensure_player_ud(context.user_data)
    loc = context.user_data.get("location")

    data = q.data.split(":", 1)
    action = data[1] if len(data) > 1 else ""

    # –®–≤–∏–¥–∫–∏–π –≤—Ö—ñ–¥ —ñ–∑ –ú—ñ—Å—Ç–∞
    if action == "enter":
        if loc != LOC_CITY:
            await q.edit_message_text("‚ùå –®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –∑ –ú—ñ—Å—Ç–∞.")
            return
        context.user_data["location"] = LOC_SHOP
        await q.edit_message_text(f"üè™ –£–≤—ñ–π—à–ª–∏ –¥–æ –ö—Ä–∞–º–Ω–∏—Ü—ñ. –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: <b>{p.gold}</b>.", parse_mode=ParseMode.HTML, reply_markup=kb_shop_main())
        return

    if action == "cancel":
        await q.edit_message_text("–ó–∞–ª–∏—à–∏–ª–∏—Å—è –≤ –ú—ñ—Å—Ç—ñ.")
        return

    # –î–∞–ª—ñ –¥—ñ—î –∫–ª–∞—Å–∏—á–Ω–∞ –ª–æ–≥—ñ–∫–∞ –º–∞–≥–∞–∑–∏–Ω—É ‚Äî —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –º–∏ –≤–∂–µ –≤ –∫—Ä–∞–º–Ω–∏—Ü—ñ
    if context.user_data.get("location") != LOC_SHOP:
        await q.edit_message_text("‚ùå –í–∏ –Ω–µ –≤ –∫—Ä–∞–º–Ω–∏—Ü—ñ. –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É –ú—ñ—Å—Ç–æ ‚ûú –ö—Ä–∞–º–Ω–∏—Ü—è —á–µ—Ä–µ–∑ /travel, –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å /shop —É –ú—ñ—Å—Ç—ñ.")
        return

    if action == "menu:main":
        await q.edit_message_text(f"üè™ –ö—Ä–∞–º–Ω–∏—Ü—è. –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: <b>{p.gold}</b>.", reply_markup=kb_shop_main(), parse_mode=ParseMode.HTML)
        return

    if action == "menu:buy":
        text, kb = render_shop_buy()
        await q.edit_message_text(text + f"\n\n–í–∞—à–µ –∑–æ–ª–æ—Ç–æ: <b>{p.gold}</b>", reply_markup=kb, parse_mode=ParseMode.HTML)
        return

    if action == "menu:sell":
        text, kb = render_shop_sell(p)
        await q.edit_message_text(text + f"\n\n–í–∞—à–µ –∑–æ–ª–æ—Ç–æ: <b>{p.gold}</b>", reply_markup=kb, parse_mode=ParseMode.HTML)
        return

    if action == "leave":
        # –º–∏—Ç—Ç—î–≤–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤ –ú—ñ—Å—Ç–æ
        context.user_data["location"] = LOC_CITY
        await q.edit_message_text("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ú—ñ—Å—Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /travel –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —à–ª—è—Ö—É.")
        return

    # –ö—É–ø—ñ–≤–ª—è —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è –∑—ñ —Å—Ç–æ–∫—É
    if action.startswith("buygear:"):
        idx = int(action.split(":",1)[1])
        goods = shop_stock()
        if idx < 0 or idx >= len(goods):
            await q.edit_message_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–≤–∞—Ä.", reply_markup=kb_shop_main())
            return
        item = goods[idx].copy()
        price = item["price"]
        if p.gold < price:
            await q.edit_message_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–æ–ª–æ—Ç–∞.", reply_markup=kb_shop_main())
            return
        p.gold -= price
        p.inventory.append(item)
        context.user_data["player"] = p.asdict()
        text, kb = render_shop_buy()
        await q.edit_message_text(
            f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: {item['emoji']} <b>{item['name']}</b> –∑–∞ {price}–∑.\n\n" + text + f"\n\n–í–∞—à–µ –∑–æ–ª–æ—Ç–æ: <b>{p.gold}</b>",
            reply_markup=kb, parse_mode=ParseMode.HTML
        )
        return

    # –ó—ñ–ª–ª—è
    if action == "buy_potion":
        if p.gold >= 10:
            p.gold -= 10
            p.potions += 1
            context.user_data["player"] = p.asdict()
            await q.edit_message_text(f"üß™ –ü—Ä–∏–¥–±–∞–Ω–æ –∑—ñ–ª–ª—è –∑–∞ 10–∑. –¢–µ–ø–µ—Ä –∑–æ–ª–æ—Ç–∞: <b>{p.gold}</b>.", parse_mode=ParseMode.HTML, reply_markup=kb_shop_main())
        else:
            await q.edit_message_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–æ–ª–æ—Ç–∞.", reply_markup=kb_shop_main())
        return

    # –ü—Ä–æ–¥–∞–∂ –ø—Ä–µ–¥–º–µ—Ç–∞ –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è
    if action.startswith("sell:"):
        idx = int(action.split(":",1)[1])
        if idx < 0 or idx >= len(p.inventory):
            await q.edit_message_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å.", reply_markup=kb_shop_main())
            return
        it = p.inventory[idx]
        if it.get("equipped"):
            await q.edit_message_text("–ó–Ω—ñ–º—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∂–µ–º.", reply_markup=kb_shop_main())
            return
        gain = sell_value(it)
        p.gold += gain
        p.inventory.pop(idx)
        context.user_data["player"] = p.asdict()
        text, kb = render_shop_sell(p)
        await q.edit_message_text(
            f"üí∞ –ü—Ä–æ–¥–∞–Ω–æ: {it['emoji']} <b>{it['name']}</b> –∑–∞ {gain}–∑.\n\n" + text + f"\n\n–í–∞—à–µ –∑–æ–ª–æ—Ç–æ: <b>{p.gold}</b>",
            reply_markup=kb, parse_mode=ParseMode.HTML
        )
        return

    await q.edit_message_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –º–∞–≥–∞–∑–∏–Ω—É.", reply_markup=kb_shop_main())
