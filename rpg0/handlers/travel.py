# -*- coding: utf-8 -*-
from __future__ import annotations
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import ContextTypes
from ..config import ADJACENT, LOCATION_ORDER, LOC_CITY, LOC_GUILD, LOC_SHOP
from ..models import ensure_player_ud

def _kb(rows): 
    return InlineKeyboardMarkup(rows)

def _build_travel_kb(current: str) -> InlineKeyboardMarkup:
    """–ü–æ–∫–∞–∑—É—î –ª–∏—à–µ —Å—É–º—ñ–∂–Ω—ñ –ª–æ–∫–∞—Ü—ñ—ó –∑ –ø–æ—Ç–æ—á–Ω–æ—é."""
    neighbors = ADJACENT.get(current, [])
    rows = [[InlineKeyboardButton(f"‚û°Ô∏è {loc}", callback_data=f"travel:{loc}")]
            for loc in LOCATION_ORDER if loc in neighbors]
    # –Ø–∫—â–æ –≤–∏ –≤ –ú—ñ—Å—Ç—ñ ‚Äî –æ–∫—Ä–µ–º–æ –ø—ñ–¥—Å–≤—ñ—Ç–∏—Ç–∏ –∫—Ä–∞–º–Ω–∏—Ü—é, –∞–ª–µ –∑–∞–ª–∏—à–∞—î–º–æ —ó—ó —Å–µ—Ä–µ–¥ —Å—É—Å—ñ–¥—ñ–≤
    if current == LOC_CITY and LOC_SHOP in neighbors:
        rows.append([InlineKeyboardButton("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –ö—Ä–∞–º–Ω–∏—Ü—é (—à–≤–∏–¥–∫–æ)", callback_data=f"travel:{LOC_SHOP}")])
    return _kb(rows or [[InlineKeyboardButton("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤", callback_data="travel:none")]])

def _neighbors_table(current: str) -> str:
    """–ö–æ—Ä–æ—Ç–∫–∞ ‚Äú—Ç–∞–±–ª–∏—á–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤‚Äù –∑ –ø—ñ–¥–∫–∞–∑–∫–∞–º–∏ —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏ –¥–ª—è –ª–æ–∫–∞—Ü—ñ—ó."""
    neighbors = ADJACENT.get(current, [])
    if not neighbors:
        return "–ó —Ü—ñ—î—ó –ª–æ–∫–∞—Ü—ñ—ó –Ω–µ–º–∞—î –≤–∏—Ö–æ–¥—ñ–≤."
    hints = {
        LOC_CITY: "–ì–æ–ª–æ–≤–Ω–∏–π –≤—É–∑–æ–ª –ø—Ä–∏–≥–æ–¥. –ó–≤—ñ–¥—Å–∏ —î —à–ª—è—Ö —É –†—É—ó–Ω–∏, –°—Ç–∞—Ä–∏–π –ª—ñ—Å —Ç–∞ üõí –ö—Ä–∞–º–Ω–∏—Ü—é.",
        LOC_GUILD: "–ú—ñ—Å—Ü–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —É–º—ñ–Ω–Ω—è–º–∏ —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –í–∏–π—Ç–∏ –º–æ–∂–Ω–∞ –ª–∏—à–µ –¥–æ –ú—ñ—Å—Ç–∞ –∞–±–æ –Ω–∞ –¢—Ä–∞–∫—Ç.",
        LOC_SHOP: "–õ–æ–∫–∞—Ü—ñ—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ. –©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø—Ä–∏–≥–æ–¥—É ‚Äî –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ú—ñ—Å—Ç–∞.",
    }
    lines = []
    if current in hints:
        lines.append(f"üìå <i>{hints[current]}</i>")
    lines.append("–î–æ—Å—Ç—É–ø–Ω—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏:")
    for loc in neighbors:
        note = ""
        if current == LOC_GUILD and loc not in (LOC_CITY, "–¢—Ä–∞–∫—Ç"):
            note = " (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)"  # –∑–∞—Ö–∏—Å–Ω–∏–π –º–∞—Ä–∫–µ—Ä; —Ñ–∞–∫—Ç–∏—á–Ω–æ –π —Ç–∞–∫ –Ω–µ –±—É–¥–µ —Å–µ—Ä–µ–¥ neighbors
        if current == LOC_CITY and loc == LOC_SHOP:
            note = " (–∫—Ä–∞–º–Ω–∏—Ü—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –º—ñ—Å—Ç–∞)"
        lines.append(f"‚Ä¢ {loc}{note}")
    return "\n".join(lines)

async def travel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—É–º—ñ–∂–Ω—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏ + —Ç–∞–±–ª–∏—á–∫—É-–ø–æ—è—Å–Ω–µ–Ω–Ω—è."""
    ensure_player_ud(context.user_data)  # –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—è
    current = context.user_data.get("location") or "–¢—Ä–∞–∫—Ç"
    text = (
        f"üß≠ –í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å: <b>{current}</b>\n\n"
        f"{_neighbors_table(current)}\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º–æ–∫:"
    )
    await update.message.reply_html(text, reply_markup=_build_travel_kb(current))

async def on_travel_select(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    current = context.user_data.get("location") or "–¢—Ä–∞–∫—Ç"
    data = q.data
    if data == "travel:none":
        await q.edit_message_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ —ñ–∑ —Ü—ñ—î—ó –ª–æ–∫–∞—Ü—ñ—ó.")
        return
    target = data.split(":", 1)[1]
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∑–≤–æ–ª–µ–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ—Ö–æ–¥—É
    if target not in ADJACENT.get(current, []):
        await q.edit_message_text(f"‚ùå –ü–µ—Ä–µ—Ö—ñ–¥ —É ‚Äú{target}‚Äù –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∑ ‚Äú{current}‚Äù.")
        return

    context.user_data["location"] = target
    text = (
        f"üß≠ –ü–µ—Ä–µ—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ. –ù–æ–≤–∞ –ª–æ–∫–∞—Ü—ñ—è: <b>{target}</b>.\n\n"
        f"{_neighbors_table(target)}\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–∏–π –Ω–∞–ø—Ä—è–º–æ–∫:"
    )
    await q.edit_message_text(text, reply_markup=_build_travel_kb(target), parse_mode="HTML")
