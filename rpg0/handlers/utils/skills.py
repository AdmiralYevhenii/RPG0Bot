# -*- coding: utf-8 -*-
"""
–°–∫—ñ–ª–∏ –∑–∞ –∫–ª–∞—Å–∞–º–∏, –∫–¥, –Ω–∞–≤—á–∞–Ω–Ω—è —É –ì—ñ–ª—å–¥—ñ—ó, –≤–∏–±—ñ—Ä –∞–∫—Ç–∏–≤–Ω–∏—Ö –Ω–∞–≤–∏—á–æ–∫ (–¥–æ 3).
"""
from typing import Dict, List, Tuple
from ..config import SKILL_COOLDOWN_TURNS

# –ë–∞–∑–æ–≤–∏–π –ø—É–ª —Å–∫—ñ–ª—ñ–≤ –∑–∞ –∫–ª–∞—Å–∞–º–∏
SKILLS_BY_CLASS: Dict[str, Dict[str, Dict]] = {
    "–†–∏—Ü–∞—Ä": {
        "shield_bash": {"name": "–£–¥–∞—Ä —â–∏—Ç–æ–º", "desc": "–°—Ç–∞–Ω: –æ–≥–ª—É—à–µ–Ω–Ω—è –Ω–∞ 1 —Ö—ñ–¥", "cd": 3, "stun": 1, "bleed": 0, "atk_boost": 0},
        "guard_stance": {"name": "–°—Ç—ñ–π–∫–∞ –∑–∞—Ö–∏—Å—Ç—É", "desc": "+2 DEF –Ω–∞ —Ü–µ–π –±—ñ–π", "cd": 4, "stun": 0, "bleed": 0, "def_add": 2},
    },
    "–°—Ç—Ä—ñ–ª–µ—Ü—å": {
        "aimed_shot": {"name": "–ü—Ä–∏—Ü—ñ–ª—å–Ω–∏–π –ø–æ—Å—Ç—Ä—ñ–ª", "desc": "–í–µ–ª–∏–∫–∞ —à–∫–æ–¥–∞", "cd": 3, "attack_add": 3},
        "bleed_arrow": {"name": "–ö—Ä–æ–≤–æ—Ç–æ—á–∏–≤–∞ —Å—Ç—Ä—ñ–ª–∞", "desc": "–ö—Ä–æ–≤–æ—Ç–µ—á–∞ –Ω–∞ 3 —Ö–æ–¥–∏", "cd": 4, "bleed": 3},
    },
    "–ú–∞–≥": {
        "fire_bolt": {"name": "–í–æ–≥–Ω—è–Ω–∏–π –±–æ–ª—Ç", "desc": "–î–æ–¥. —à–∫–æ–¥–∞ + —à–∞–Ω—Å –ø—ñ–¥–ø–∞–ª—É (–∫—Ä–æ–≤–æ—Ç–µ—á–∞ —è–∫ –∞–Ω–∞–ª–æ–≥)", "cd": 3, "attack_add": 2, "bleed": 2},
        "time_twist": {"name": "–°–∫—Ä—É—Ç —á–∞—Å—É", "desc": "+—ñ–Ω—ñ—Ü—ñ–∞—Ç–∏–≤–∞", "cd": 4, "initiative_add": 40},
    },
}

def skills_for_class(cls: str) -> Dict[str, Dict]:
    return SKILLS_BY_CLASS.get(cls, {})

def grant_skill_on_level(p, step: int = 5) -> Tuple[bool, str]:
    """–ù–∞ –∫–æ–∂–Ω–æ–º—É step-—Ä—ñ–≤–Ω—ñ (5,10,15...) –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∏–±—Ä–∞—Ç–∏ –Ω–æ–≤–∏–π —Å–∫—ñ–ª –∑ –∫–ª–∞—Å–æ–≤–æ–≥–æ –ø—É–ª—É."""
    if p.level % step != 0:
        return False, ""
    pool = skills_for_class(p.class_name)
    if not pool:
        return False, ""
    # –∑–Ω–∞–π—Ç–∏ —Ç—ñ, —è–∫–∏—Ö —â–µ –Ω–µ–º–∞—î
    candidates = [sid for sid in pool.keys() if sid not in p.known_skills]
    if not candidates:
        return False, ""
    # –ü—Ä–æ—Å—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞—î–º–æ –ø–µ—Ä—à–∏–π (–∞–±–æ –∑—Ä–æ–±–∏ –º–µ–Ω—é –≤–∏–±–æ—Ä—É –≤ –ì—ñ–ª—å–¥—ñ—ó)
    sid = candidates[0]
    p.known_skills.append(sid)
    return True, f"–í–∏ –æ–ø–∞–Ω—É–≤–∞–ª–∏ –Ω–æ–≤–µ –≤–º—ñ–Ω–Ω—è: {pool[sid]['name']}"

def format_skills_list(p) -> str:
    if not p.known_skills:
        return "–ù–µ–º–∞—î –≤–∏–≤—á–µ–Ω–∏—Ö –≤–º—ñ–Ω—å."
    pool = skills_for_class(p.class_name)
    lines = []
    for sid in p.known_skills:
        meta = pool.get(sid, {"name": sid})
        used = "üü©" if sid in p.slotted_skills else "‚¨ú"
        lines.append(f"{used} {meta.get('name', sid)} (/{sid})")
    return "\n".join(lines)
