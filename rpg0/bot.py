# -*- coding: utf-8 -*-
"""
–ó–±–∏—Ä–∞–Ω–Ω—è Application —ñ –∫–æ–º–∞–Ω–¥, —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤.
"""
from __future__ import annotations

import logging
import os
import random
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, PicklePersistence, ContextTypes, filters,
)
from telegram.constants import ParseMode

from .config import BOT_DISPLAY_NAME, PERSIST_FILE, DEFAULT_LOCATION, WEBHOOK_URL, PORT, WEBHOOK_PATH
from .models import ensure_player_ud, Enemy
from .handlers.registration import register, on_reg_action
from .handlers.battle import CHOOSING_ACTION, ENEMY_TURN, LOOTING, on_battle_action, enemy_turn, after_loot, battle_keyboard
from .handlers.shop import shop, on_shop_action
from .handlers.travel import travel, on_travel_select
from .handlers.quest import quest, on_quest_action
from .handlers.inventory import inventory, on_inv_action
from .handlers.guild import guild, on_guild_action, GUILD_LOC_NAME
from .utils.loot import generate_loot
from .config import BOT_DISPLAY_NAME, PERSIST_FILE, DEFAULT_LOCATION, WEBHOOK_URL, PORT, WEBHOOK_PATH, LOC_SHOP, LOC_OLD_FOREST
from .handlers.guild import guild, on_guild_action, GUILD_LOC_NAME


LOGGER = logging.getLogger("RPG")


def format_stats(p) -> str:
    inv_counts = {"‚ö™–ó–≤–∏—á–∞–π–Ω—ñ": 0, "üü¢–ù–µ–∑–≤–∏—á–∞–π–Ω—ñ": 0, "üîµ–†—ñ–¥–∫—ñ—Å–Ω—ñ": 0, "üü£–ï–ø—ñ—á–Ω—ñ": 0, "üü°–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ñ": 0}
    for it in p.inventory:
        r = it.get("rarity", "common")
        if r == "common": inv_counts["‚ö™–ó–≤–∏—á–∞–π–Ω—ñ"] += 1
        elif r == "uncommon": inv_counts["üü¢–ù–µ–∑–≤–∏—á–∞–π–Ω—ñ"] += 1
        elif r == "rare": inv_counts["üîµ–†—ñ–¥–∫—ñ—Å–Ω—ñ"] += 1
        elif r == "epic": inv_counts["üü£–ï–ø—ñ—á–Ω—ñ"] += 1
        elif r == "legendary": inv_counts["üü°–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ñ"] += 1

    inv_str = ", ".join([f"{k}:{v}" for k, v in inv_counts.items() if v]) or "–ø–æ—Ä–æ–∂–Ω—å–æ"

    eq_short = []
    for slot in ("weapon", "armor", "accessory"):
        cur = p.equipment.get(slot)
        if cur:
            eq_short.append(f"{slot}:{cur['name']}")
    eq_str = ", ".join(eq_short) if eq_short else "–Ω–µ–º–∞—î"

    cls = f"\n–ö–ª–∞—Å: {p.class_name}" if p.class_name else ""
    bs = f"\n–ü–µ—Ä–µ–¥—ñ—Å—Ç–æ—Ä—ñ—è: {p.backstory}" if p.backstory else ""

    load = ", ".join(p.skills_loadout) if p.skills_loadout else "‚Äî"
    return (f"<b>{p.name}</b> ‚Äî —Ä—ñ–≤–µ–Ω—å {p.level}{cls}{bs}\n"
            f"HP: {p.hp}/{p.max_hp} | –ê—Ç–∞–∫–∞: {p.atk} | –ó–∞—Ö–∏—Å—Ç: {p.defense}\n"
            f"EXP: {p.exp}/{20 + (p.level - 1) * 10} | –ó—ñ–ª–ª—è: {p.potions} | –ó–æ–ª–æ—Ç–æ: {p.gold}\n"
            f"üß© –ï–∫—ñ–ø: {eq_str}\n"
            f"üß∞ –õ—É—Ç: {inv_str}\n"
            f"‚ú® –ù–∞–±—ñ—Ä —É–º—ñ–Ω—å: {load}")


async def start(update, context: ContextTypes.DEFAULT_TYPE):
    ensure_player_ud(context.user_data)
    first = update.effective_user.first_name or "–ú–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫"
    welcome = (f"üëã {first}, –≤–∞—Å –≤—ñ—Ç–∞—î <b>{BOT_DISPLAY_NAME}</b> ‚Äî –ø–æ–∫—Ä–æ–∫–æ–≤–∞ RPG!\n\n"
               "‚ú® –Ø–∫—â–æ –≤–∏ –≤–ø–µ—Ä—à–µ —Ç—É—Ç ‚Äî –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —É –≥—ñ–ª—å–¥—ñ—ó: /register\n\n"
               "–ö–æ–º–∞–Ω–¥–∏:\n"
               "/register ‚Äî —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤ –≥—ñ–ª—å–¥—ñ—ó\n"
               "/newgame ‚Äî –ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É –≥—Ä—É\n"
               "/stats ‚Äî —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ—è\n"
               "/inventory ‚Äî —ñ–Ω–≤–µ–Ω—Ç–∞—Ä\n"
               "/explore ‚Äî –≤–∏—Ä—É—à–∏—Ç–∏ —É –ø—Ä–∏–≥–æ–¥—É\n"
               "/travel ‚Äî –ª–æ–∫–∞—Ü—ñ—ó\n"
               "/guild ‚Äî –±—É–¥—ñ–≤–ª—è –ì—ñ–ª—å–¥—ñ—ó (–∫–µ—Ä—É–≤–∞–Ω–Ω—è –≤–º—ñ–Ω–Ω—è–º–∏)\n"
               "/shop ‚Äî –∫—Ä–∞–º–Ω–∏—Ü—è\n"
               "/quest ‚Äî –∫–≤–µ—Å—Ç–∏\n"
               "/help ‚Äî –¥–æ–≤—ñ–¥–∫–∞")
    await update.message.reply_html(welcome)

async def help_cmd(update, context):
    await update.message.reply_text("–ü–∏—Ç–∞–Ω–Ω—è? –ù–∞–ø–∏—à–∏ /start –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.")

async def newgame(update, context):
    from .models import Player
    context.user_data["player"] = Player().asdict()
    await update.message.reply_html("üÜï <b>–ù–æ–≤–∞ –ø—Ä–∏–≥–æ–¥–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∞!</b> /register ‚Äî —â–æ–± –æ–±—Ä–∞—Ç–∏ –∫–ª–∞—Å.")

async def stats(update, context):
    p = ensure_player_ud(context.user_data)
    await update.message.reply_html(format_stats(p))

def get_location(ud):
    return ud.get("location", DEFAULT_LOCATION)

def spawn_enemy_for(p, location="–¢—Ä–∞–∫—Ç") -> Enemy:
    tables = {
        "–ú—ñ—Å—Ç–æ": [("–ü'—è–Ω–∏–π —Ö—É–ª—ñ–≥–∞–Ω", 18,5,1,10,8), ("–ö–∏—à–µ–Ω—å–∫–æ–≤–∏–π –∑–ª–æ–¥—ñ–π", 20,6,2,12,12), ("–®–∏–±–∞–π–≥–æ–ª–æ–≤–∞", 22,7,2,14,14)],
        "–¢—Ä–∞–∫—Ç": [("–ì–æ–±–ª—ñ–Ω-–Ω–∞–±—ñ–≥–Ω–∏–∫",18,5,1,12,10), ("–í–æ–≤–∫ –ª—ñ—Å–æ–≤–∏–π",20,6,2,14,12), ("–†–æ–∑–±—ñ–π–Ω–∏–∫ —Ç—Ä–∞–∫—Ç—É",24,8,3,18,16)],
        "–†—É—ó–Ω–∏": [("–ö—ñ—Å—Ç—è–Ω–∏–π –≤–∞—Ä—Ç–æ–≤–∏–π",22,7,2,16,14), ("–û—Ä–∫-–±–µ—Ä—Å–µ—Ä–∫",28,9,3,22,20), ("–†–∏—Ü–∞—Ä-–≤—ñ–¥—Å—Ç—É–ø–Ω–∏–∫",32,10,4,26,24)],
        GUILD_LOC_NAME: [("–°—Ç–æ—Ä–æ–∂ –≥—ñ–ª—å–¥—ñ—ó (—Å–ø–∞—Ä–∏–Ω–≥)", 18,6,2,8,0)],
        LOC_OLD_FOREST: [("–õ—ñ—Å–æ–≤–∏–π –¥—É—Ö", 26,8,2,20,18), ("–•–∏–º–µ—Ä–Ω–∏–π —Ç—Ä–æ–ª—å", 30,9,3,22,22), ("–°—É—Ö–æ–ª—ñ—Å", 24,8,2,18,16)],
    }
    import random
    if location not in tables:
        location = "–¢—Ä–∞–∫—Ç"
    name, base_hp, base_atk, base_def, exp, gold = random.choice(tables[location])
    hp = base_hp + (p.level - 1) * 4
    atk = base_atk + (p.level - 1)
    defense = base_def + (p.level // 3)
    exp_reward = exp + (p.level - 1) * 3
    gold_reward = gold + random.randint(0, p.level * 2)
    return Enemy(name=name, hp=hp, max_hp=hp, atk=atk, defense=defense,
                 exp_reward=exp_reward, gold_reward=gold_reward)

async def explore(update, context):
    p = ensure_player_ud(context.user_data)
    if not p.registered:
        await update.message.reply_html("–°–ø–µ—Ä—à—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —É –≥—ñ–ª—å–¥—ñ—ó: /register")
        return ConversationHandler.END

    location = context.user_data.get("location", DEFAULT_LOCATION)
    if location == LOC_SHOP:
        await update.message.reply_html("üõí –í–∏ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∫—Ä–∞–º–Ω–∏—Ü—ñ ‚Äî —Ç—É—Ç –Ω–µ –≤–æ—é—é—Ç—å. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å /shop –∞–±–æ /travel, —â–æ–± –≤–∏–π—Ç–∏.")
        return ConversationHandler.END

    import random
    roll = random.random()
    if roll < 0.6:
        enemy = spawn_enemy_for(p, location)
        context.user_data["enemy"] = enemy.__dict__
        context.user_data["defending"] = False
        context.user_data["battle"] = {"cooldowns": {}, "e_status": {}, "p_status": {}}
        await update.message.reply_html(
            f"üî™ [{location}] –í–∏ –Ω–∞—Ç—Ä–∞–ø–∏–ª–∏ –Ω–∞ <b>{enemy.name}</b>!\nHP –≤–æ—Ä–æ–≥–∞: {enemy.hp}/{enemy.max_hp}",
            reply_markup=battle_keyboard(p, True, context.user_data.get("battle"))
        )
        return CHOOSING_ACTION
    elif roll < 0.85:
        from .utils.loot import generate_loot
        item = generate_loot(location)
        p.inventory.append(item)
        p.gold += item.get("gold", 0)
        context.user_data["player"] = p.asdict()
        extra = f" (+{item['gold']} –∑–æ–ª–æ—Ç–∞)" if item.get("gold") else ""
        await update.message.reply_html(
            f"üß∞ –ó–Ω–∞—Ö—ñ–¥–∫–∞ —É –ª–æ–∫–∞—Ü—ñ—ó <b>{location}</b>: {item['emoji']} <b>{item['name']}</b> ‚Äî {item['title']}{extra}!"
        )
        return ConversationHandler.END
    else:
        healed = min(p.max_hp - p.hp, random.randint(5, 12))
        p.hp += healed
        context.user_data["player"] = p.asdict()
        await update.message.reply_html(f"‚õ∫ –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫: +{healed} HP. –¢–µ–ø–µ—Ä {p.hp}/{p.max_hp}.")
        return ConversationHandler.END

async def on_unknown(update, context):
    await update.message.reply_text("–ù–µ—Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ /help")

async def on_error(update, context):
    LOGGER.exception("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É", exc_info=context.error)

def build_app() -> Application:
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è.")

    persistence = PicklePersistence(filepath=PERSIST_FILE)
    app = ApplicationBuilder().token(token).persistence(persistence).build()

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("newgame", newgame))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("inventory", inventory))
    app.add_handler(CommandHandler("shop", shop))
    app.add_handler(CommandHandler("travel", travel))
    app.add_handler(CommandHandler("quest", quest))
    app.add_handler(CommandHandler("register", register))
    app.add_handler(CommandHandler("guild", guild))

    # –Ü–Ω–≤–µ–Ω—Ç–∞—Ä callbacks
    app.add_handler(CallbackQueryHandler(on_inv_action, pattern=r"^inv:"))
    # –ú–∞–≥–∞–∑–∏–Ω callbacks
    app.add_handler(CallbackQueryHandler(on_shop_action, pattern=r"^shop:"))
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è callbacks
    app.add_handler(CallbackQueryHandler(on_reg_action, pattern=r"^reg:"))
    # –ü–æ–¥–æ—Ä–æ–∂ callbacks
    app.add_handler(CallbackQueryHandler(on_travel_select, pattern=r"^travel:"))
    # –ö–≤–µ—Å—Ç–∏ callbacks
    app.add_handler(CallbackQueryHandler(on_quest_action, pattern=r"^quest:"))
    # –ì—ñ–ª—å–¥—ñ—è callbacks
    app.add_handler(CallbackQueryHandler(on_guild_action, pattern=r"^guild:"))

    # –ë–∏—Ç–≤–∞ —è–∫ —Ä–æ–∑–º–æ–≤–∞
    battle_conv = ConversationHandler(
    entry_points=[CommandHandler("explore", explore)],
    states={
        # –û–±—Ä–æ–±–ª—è—î–º–æ –¢–Ü–õ–¨–ö–ò –±–æ–π–æ–≤—ñ callback‚Äô–∏:
        CHOOSING_ACTION: [
            CallbackQueryHandler(
                on_battle_action,
                pattern=r"^(attack|defend|skill|potion|run|continue)$"
            )
        ],
        ENEMY_TURN: [],
        # –ù–∞ –µ–∫—Ä–∞–Ω—ñ ¬´–ø—ñ—Å–ª—è –±–æ—é¬ª –¥–æ–∑–≤–æ–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ "continue"
        LOOTING: [CallbackQueryHandler(after_loot, pattern=r"^continue$")],
    },
    # /explore —Ç–µ–ø–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Ä–æ–∑–º–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞
    fallbacks=[
        CommandHandler("stats", stats),
        CommandHandler("explore", explore),
        CommandHandler("cancel", lambda u, c: after_loot(u, c)),  # —à–≤–∏–¥–∫–∏–π –≤–∏—Ö—ñ–¥
    ],
    name="battle_conv",
    persistent=True,
)
    app.add_handler(battle_conv)

    # Unknown + errors
    app.add_handler(MessageHandler(filters.COMMAND, on_unknown))
    app.add_error_handler(on_error)
    return app
